#!/bin/sh
# \
exec tclsh "$0" "$@"
# This software is copyrighted 2004, 2005 by G. Andrew Mangogna.  The following
# terms apply to all files associated with the software unless explicitly
# disclaimed in individual files.
# 
# The authors hereby grant permission to use, copy, modify, distribute,
# and license this software and its documentation for any purpose, provided
# that existing copyright notices are retained in all copies and that this
# notice is included verbatim in any distributions. No written agreement,
# license, or royalty fee is required for any of the authorized uses.
# Modifications to this software may be copyrighted by their authors and
# need not follow the licensing terms described here, provided that the
# new terms are clearly indicated on the first page of each file where
# they apply.
# 
# IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY FOR
# DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING
# OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY DERIVATIVES
# THEREOF, EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT.  THIS SOFTWARE
# IS PROVIDED ON AN "AS IS" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE
# NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS,
# OR MODIFICATIONS.
# 
# GOVERNMENT USE: If you are acquiring this software on behalf of the
# U.S. government, the Government shall have only "Restricted Rights"
# in the software and related documentation as defined in the Federal
# Acquisition Regulations (FARs) in Clause 52.227.19 (c) (2).  If you
# are acquiring the software on behalf of the Department of Defense,
# the software shall be classified as "Commercial Computer Software"
# and the Government shall have only "Restricted Rights" as defined in
# Clause 252.227-7013 (c) (1) of DFARs.  Notwithstanding the foregoing,
# the authors grant the U.S. Government and others acting in its behalf
# permission to use and distribute the software in accordance with the
# terms specified in this license.
# 
#  *++
# MODULE:
#   ral.test -- test cases for the Tcl Relational Algebra Library
# 
# ABSTRACT:
#   This file contains a set of test cases suitable for execution via
#   "tcltest" to test the code associated with the TCL Relational
#   Algebra library.
# 
# $RCSfile: ral.test,v $
# $Revision: 1.8 $
# $Date: 2006/03/27 02:20:35 $
#  *--

package require tcltest 2.2
eval tcltest::configure $argv

global env
set env(LD_LIBRARY_PATH) [file normalize ..]:/usr/local/ActiveTcl/lib
set ::auto_path [linsert $::auto_path 0 [file normalize ..]]
package require ral 0.8

proc tupleMatch {expected actual} {
    return [::ral::tuple equal $expected $actual]
}

proc relationMatch {expected actual} {
    return [::ral::relation is $expected == $actual]
}

namespace eval ::ral::test {
    namespace import ::tcltest::*
    namespace import ::ral::*

    customMatch tuple tupleMatch
    customMatch relation relationMatch

    set S {
	Relation
	{S# string SNAME string STATUS int CITY string}
	S#
	{
	    {S# S1 SNAME Smith STATUS 20 CITY London}
	    {S# S2 SNAME Jones STATUS 10 CITY Paris}
	    {S# S3 SNAME Blake STATUS 30 CITY Paris}
	    {S# S4 SNAME Clark STATUS 20 CITY London}
	    {S# S5 SNAME Adams STATUS 30 CITY Athens}
	}
    }
    set P {
	Relation
	{P# string PNAME string COLOR string WEIGHT double CITY string}
	P#
	{
	    {P# P1 PNAME Nut COLOR Red WEIGHT 12.0 CITY London}
	    {P# P2 PNAME Bolt COLOR Green WEIGHT 17.0 CITY Paris}
	    {P# P3 PNAME Screw COLOR Blue WEIGHT 17.0 CITY Oslo}
	    {P# P4 PNAME Screw COLOR Red WEIGHT 14.0 CITY London}
	    {P# P5 PNAME Cam COLOR Blue WEIGHT 12.0 CITY Paris}
	    {P# P6 PNAME Cog COLOR Red WEIGHT 19.0 CITY London}
	}
    }
    set SP {
	Relation
	{S# string P# string QTY int}
	{{S# P#}}
	{
	    {S# S1 P# P1 QTY 300}
	    {S# S1 P# P2 QTY 200}
	    {S# S1 P# P3 QTY 400}
	    {S# S1 P# P4 QTY 200}
	    {S# S1 P# P5 QTY 100}
	    {S# S1 P# P6 QTY 100}
	    {S# S2 P# P1 QTY 300}
	    {S# S2 P# P2 QTY 400}
	    {S# S3 P# P2 QTY 200}
	    {S# S4 P# P2 QTY 200}
	    {S# S4 P# P4 QTY 300}
	    {S# S4 P# P5 QTY 400}
	}
    }

    # Basic tests on the tuple string representation
    test tuple-strrep-1.0 {no attributes} -body {
	tuple degree {Tuple {} {}}
    } -result 0

    test tuple-strrep-2.0 {single attributes} -body {
	tuple degree {Tuple {Name string} {Name Fred}}
    } -result 1

    test tuple-strrep-3.0 {multiple attributes} -body {
	tuple degree {Tuple {Name string Num int Street string}\
	    {Name Fred Num 100 Street Main}}
    } -result 3

    test tuple-strrep-4.0 {Tuple valued attribute} -body {
	tuple degree {Tuple {Name string Addr {Tuple {Num int Street string}}}\
	    {Name Fred Addr {Num 100 Street Main}}}
    } -result 2

    test tuple-strrep-5.0 {other data types} -body {
	tuple degree {Tuple {Name string Status int Position double}\
	    {Name Fred Status 20 Position 1}}
    } -result 3

    test tuple-strrep-5.1 {other data types - wrong values} -body {
	tuple degree {Tuple {Name string Status int Position double}\
	    {Name Fred Status 20.0 Position 1}}
    } -result {bad value type for value, "20.0"} -returnCodes error

    test tuple-strrep-5.2 {other data types - wrong values} -body {
	tuple degree {Tuple {Name string Status int Position double}\
	    {Name Fred Status 20 Position foo}}
    } -result {bad value type for value, "foo"} -returnCodes error

    test tuple-strrep-6.0 {bad format -- extra list element} -body {
	tuple degree {Tuple {Name string} {Name Fred} {}}
    } -result {bad tuple value format, "Tuple {Name string} {Name Fred} {}"}\
    -returnCodes error

    test tuple-strrep-6.1 {bad format -- missing list element} -body {
	tuple degree {Tuple Name}
    } -result {bad tuple value format, "Tuple Name"} -returnCodes error

    test tuple-strrep-6.2 {bad format -- bad keyword} -body {
	tuple degree {Tupel {Name string} {Name Fred}}
    } -result {bad tuple type keyword, "Tupel"}\
    -returnCodes error

    test tuple-strrep-6.3 {bad format -- bad heading} -body {
	tuple degree {Tuple {Name string foo} {Name Fred}}
    } -result {bad tuple heading format, "Name string foo"} -returnCodes error

    test tuple-strrep-6.4 {bad format -- duplicate attribute names} -body {
	tuple degree {Tuple {Name string Name int} {Name Fred Name George}}
    } -result {duplicate attribute name, "Name"} -returnCodes error

    test tuple-strrep-6.5 {bad format -- insufficient values} -body {
	tuple degree {Tuple {Name string Num int Street string}\
	    {Name Fred Num 100}}
    } -result {wrong number of attributes specified, "Name Fred Num 100"}\
    -returnCodes error

    test tuple-strrep-6.6 {bad format -- too many values} -body {
	tuple degree {Tuple {Name string Num int Street string}\
	    {Name Fred Num 100 Street Main Num 200}}
    } -result {wrong number of attributes specified,\
	"Name Fred Num 100 Street Main Num 200"}\
    -returnCodes error

    test tuple-strrep-6.7 {bad format -- value for unknown attribute} -body {
	tuple degree {Tuple {Name string Num int Street string}\
	    {Name Fred Num 100 City Main}}
    } -result {unknown attribute name, "City"} -returnCodes error

    # Tuple Tests

    # tuple assign subcommand
    test tuple-assign-1.0 {single attribute} -body {
	tuple assign {Tuple {Name string} {Name Andrew}}
	expr {$Name eq "Andrew"}
    } -result 1

    test tuple-assign-2.0 {multiple attributes} -body {
	tuple assign {Tuple {Name string Age int} {Name Andrew Age 20}}
	expr {$Name eq "Andrew" && $Age == 20}
    } -result 1

    test tuple-assign-3.0 {no attributes} -body {
	tuple assign {Tuple {} {}}
    } -result 0

    # tuple create subcommand
    test tuple-create-1.0 {single attribute} -body {
	tuple create {Name string} {Name Andrew}
    } -result {Tuple {Name string} {Name Andrew}} -match tuple

    test tuple-create-2.0 {multiple attributes} -body {
	set h {Name string Age int}
	tuple create $h {Name Andrew Age 20}
    } -result {Tuple {Name string Age int} {Name Andrew Age 20}} -match tuple

    test tuple-create-3.0 {bad format} -body {
	set h {Name string Age int}
	tuple create $h {Name Andrew foo}
    } -result {bad tuple value format, "Name Andrew foo"} -returnCodes error

    test tuple-create-4.0 {unknown attribute} -body {
	set h {Name string Age int}
	tuple create $h {Name Andrew foo 20}
    } -result {unknown attribute name, "foo"} -returnCodes error

    test tuple-create-5.0 {bad value type} -body {
	set h {Name string Age int}
	tuple create $h {Name Andrew Age foo}
    } -result {bad value type for value, "foo"} -returnCodes error

    test tuple-create-6.0 {multiple assignment} -body {
	set h {Name string Age int}
	tuple create $h {Name Andrew Name foo}
    } -result {duplicate attribute name, "Name"} -returnCodes error

    test tuple-create-7.0 {different ordering} -body {
	set h {Name string Age int}
	tuple create $h {Age 20 Name Andrew}
    } -result {Tuple {Name string Age int} {Name Andrew Age 20}}

    test tuple-create-8.0 {empty tuple} -body {
	tuple create {} {}
    } -result {Tuple {} {}} -match tuple

    # tuple degree subcommand
    test tuple-degree-1.0 {single attribute} -body {
	tuple degree {Tuple {Name string} {Name Andrew}}
    } -result 1

    test tuple-degree-2.0 {multiple attributes} -body {
	tuple degree {Tuple {Name string Age int} {Age 20 Name Andrew}}
    } -result 2

    test tuple-degree-3.0 {empty tuple} -body {
	tuple degree {Tuple {} {}}
    } -result 0

    # tuple eliminate subcommand
    test tuple-eliminate-1.0 {single attribute} -body {
	tuple eliminate {Tuple {Name string} {Name Andrew}} Name
    } -result {Tuple {} {}}

    test tuple-eliminate-2.0 {multiple attributes} -body {
	tuple eliminate {Tuple {Name string Age int Size double}\
	    {Name Andrew Age 20 Size 1.0}} Age Size
    } -result {Tuple {Name string} {Name Andrew}}

    test tuple-eliminate-3.0 {non-existent attribute} -body {
	tuple eliminate {Tuple {Name string Age int Size double}\
	    {Name Andrew Age 20 Size 1.0}} foo
    } -result {unknown attribute name, "foo"} -returnCodes error

    # tuple equal subcommand
    test tuple-equal-1.0 {single attribute, match} -body {
	set t1 {Tuple {Name string} {Name Andrew}}
	set t2 {Tuple {Name string} {Name Andrew}}
	tuple equal $t1 $t2
    } -result 1

    test tuple-equal-2.0 {multiple attributes, match} -body {
	set t1 {Tuple {Name string Age int} {Age 20 Name Andrew}}
	set t2 {Tuple {Name string Age int} {Name Andrew Age 20}}
	tuple equal $t1 $t2
    } -result 1

    test tuple-equal-3.0 {single attribute, value mismatch} -body {
	set t1 {Tuple {Name string} {Name Andrew}}
	set t2 {Tuple {Name string} {Name George}}
	tuple equal $t1 $t2
    } -result 0

    test tuple-equal-4.0 {single attribute, attribute name mismatch} -body {
	set t1 {Tuple {Name string} {Name Andrew}}
	set t2 {Tuple {name string} {name George}}
	tuple equal $t1 $t2
    } -result 0

    test tuple-equal-5.0 {single attribute, type mismatch} -body {
	set t1 {Tuple {Name string} {Name 20}}
	set t2 {Tuple {Name int} {Name 40}}
	tuple equal $t1 $t2
    } -result 0

    test tuple-equal-6.0 {multiple attributes, value mismatch} -body {
	set t1 {Tuple {Name string Age int} {Age 20 Name Andrew}}
	set t2 {Tuple {Name string Age int} {Name Andrew Age 30}}
	tuple equal $t1 $t2
    } -result 0

    test tuple-equal-7.0 {multiple attributes, match, out of order} -body {
	set t1 {Tuple {Name string Age int Size double}\
	    {Name Andrew Age 20 Size 1.0}}
	set t2 {Tuple {Size double Name string Age int}\
	    {Name Andrew Age 20 Size 1.0}}
	tuple equal $t1 $t2
    } -result 1

    test tuple-equal-8.0 {multiple attributes, match, value variations} -body {
	set t1 {Tuple {Name string Age int Size double}\
	    {Name Andrew Age 0x20 Size 12.30}}
	set t2 {Tuple {Size double Name string Age int}\
	    {Name Andrew Age 32 Size 1.23e1}}
	tuple equal $t1 $t2
    } -result 1

    # tuple extend subcommand
    test tuple-extend-1.0 {single attribute} -body {
	set t {Tuple {Name string} {Name Andrew}}
	tuple extend $t {Age int 20}
    } -result {Tuple {Name string Age int} {Name Andrew Age 20}} -match tuple

    test tuple-extend-2.0 {multiple attributes} -body {
	set t {Tuple {Name string} {Name Andrew}}
	tuple extend $t {Age int 20} {Size double 1.3}
    } -result {Tuple {Name string Age int Size double}\
	{Name Andrew Age 20 Size 1.3}} -match tuple

    test tuple-extend-3.0 {duplicate name} -body {
	set t {Tuple {Name string} {Name Andrew}}
	tuple extend $t {Name int 20}
    } -result {duplicate attribute name, "Name"} -returnCodes error

    test tuple-extend-4.0 {bad value} -body {
	set t {Tuple {Name string} {Name Andrew}}
	tuple extend $t {Age int foo}
    } -result {expected integer but got "foo"} -returnCodes error

    test tuple-extend-5.0 {bad type} -body {
	set t {Tuple {Name string} {Name Andrew}}
	tuple extend $t {Age foo foo}
    } -result {unknown data type, "foo"} -returnCodes error

    # tuple extract subcommand
    test tuple-extract-1.0 {single attribute} -body {
	set t {Tuple {Name string} {Name Andrew}}
	tuple extract $t Name
    } -result {Andrew}

    test tuple-extract-2.0 {multiple attributes} -body {
	set t {Tuple {Name string Age int Size double}\
	    {Name Andrew Age 20 Size 1.3}}
	tuple extract $t Age Size
    } -result {20 1.3}

    test tuple-extract-3.0 {unknown attribute} -body {
	set t {Tuple {Name string Age int Size double}\
	    {Name Andrew Age 20 Size 1.3}}
	tuple extract $t foo
    } -result {unknown attribute name, "foo"} -returnCodes error

    # tuple get subcommand
    test tuple-get-1.0 {single attribute} -body {
	tuple get {Tuple {Name string} {Name Andrew}}
    } -result {Name Andrew}

    test tuple-get-2.0 {multiple attributes} -body {
	tuple get {Tuple {Name string Age int Size double}\
	    {Name Andrew Age 20 Size 1.3}}
    } -result {Name Andrew Age 20 Size 1.3}

    # tuple heading subcommand
    test tuple-heading-1.0 {single attribute} -setup {
	set t [tuple create {Name string} {Name Andrew}]
    } -body {
	tuple heading $t
    } -result {Tuple {Name string}}

    test tuple-heading-2.0 {multiple attributes} -setup {
	set t [tuple create {Name string Age int Size double}\
	    {Name Andrew Age 20 Size 3.0}]
    } -body {
	tuple heading $t
    } -result {Tuple {Name string Age int Size double}}

    # tuple project subcommand
    test tuple-project-1.0 {single attribute} -body {
	set t {Tuple {Name string} {Name Andrew}}
	tuple project $t Name
    } -result {Tuple {Name string} {Name Andrew}} -match tuple

    test tuple-project-2.0 {multiple attributes} -body {
	set t {Tuple {Name string Age int Size double}\
	    {Name Andrew Age 20 Size 1.3}}
	tuple project $t Name Age
    } -result {Tuple {Name string Age int} {Name Andrew Age 20}} -match tuple

    test tuple-project-3.0 {project nothing} -body {
	set t {Tuple {Name string Age int} {Name Andrew Age 20}}
	tuple project $t
    } -result {Tuple {} {}} -match tuple

    test tuple-project-4.0 {project everything} -body {
	set t {Tuple {Name string Age int} {Name Andrew Age 20}}
	tuple project $t Name Age
    } -result {Tuple {Name string Age int} {Name Andrew Age 20}} -match tuple

    test tuple-project-5.0 {unknown attribute} -body {
	set t {Tuple {Name string Age int} {Name Andrew Age 20}}
	tuple project $t foo
    } -result {unknown attribute name, "foo"} -returnCodes error

    # tuple rename subcommand
    test tuple-rename-1.0 {single attribute} -setup {
	set t [tuple create {Name string} {Name Andrew}]
    } -body {
	tuple rename $t Name Age
    } -result {Tuple {Age string} {Age Andrew}} -match tuple

    test tuple-rename-2.0 {multiple attributes} -setup {
	set t [tuple create {Name string Age int} {Name Andrew Age 20}]
    } -body {
	tuple rename $t Name foo
    } -result {Tuple {foo string Age int} {foo Andrew Age 20}} -match tuple

    test tuple-rename-3.0 {unknown attribute} -setup {
	set t [tuple create {Name string Age int} {Name Andrew Age 20}]
    } -body {
	tuple rename $t foo Name
    } -result {unknown attribute name, "foo"} -returnCodes error

    test tuple-rename-4.0 {unpaired attributes} -setup {
	set t [tuple create {Name string Age int} {Name Andrew Age 20}]
    } -body {
	tuple rename $t foo Name bar
    } -result {bad list of pairs, "for oldname / newname arguments"}\
    -returnCodes error

    test tuple-rename-5.0 {multiple renamings} -setup {
	set t [tuple create {Name string Age int} {Name Andrew Age 20}]
    } -body {
	tuple rename $t Age bar Name foo
    } -result {Tuple {foo string bar int} {foo Andrew bar 20}} -match tuple

    test tuple-rename-6.0 {same attribute, multiple renamings} -setup {
	set t [tuple create {Name string Age int} {Name Andrew Age 20}]
    } -body {
	tuple rename $t Name foo foo bar bar baz
    } -result {Tuple {baz string Age int} {baz Andrew Age 20}} -match tuple

    test tuple-rename-7.0 {existing attribute} -setup {
	set t [tuple create {Name string Age int} {Name Andrew Age 20}]
    } -body {
	tuple rename $t Name Age
    } -result {duplicate attribute name, "Age"} -returnCodes error

    # tuple unwrap subcommand
    test tuple-unwrap-1.0 {unwrap multiple attributes} -setup {
	set t [tuple create\
	    {Name string\
		Address {Tuple {Number int Street string City string}}}\
	    {Name Andrew Address {Number 599 Street Blackwood City Sunnyvale}}]
    } -body {
	tuple unwrap $t Address
    } -result {Tuple {Name string Number int Street string City string}\
	{Name Andrew Number 599 Street Blackwood City Sunnyvale}}\
    -match tuple

    test tuple-unwrap-2.0 {unwrap single attribute} -setup {
	set t [tuple create\
	    {Name string Address {Tuple {Number int}}}\
	    {Name Andrew Address {Number 599}}]
    } -body {
	tuple unwrap $t Address
    } -result {Tuple {Name string Number int} {Name Andrew Number 599}}\
    -match tuple

    test tuple-unwrap-3.0 {unknown unwrap attribute} -setup {
	set t [tuple create\
	    {Name string\
		Address {Tuple {Number int Street string City string}}}\
	    {Name Andrew Address {Number 599 Street Blackwood City Sunnyvale}}]
    } -body {
	tuple unwrap $t foo
    } -result {unknown attribute name, "foo"} -returnCodes error

    test tuple-unwrap-4.0 {non-tuple unwrap attribute} -setup {
	set t [tuple create\
	    {Name string\
		Address {Tuple {Number int Street string City string}}}\
	    {Name Andrew Address {Number 599 Street Blackwood City Sunnyvale}}]
    } -body {
	tuple unwrap $t Name
    } -result {bad value type for value,\
	"attribute to unwrap must be of Tuple type"} -returnCodes error

    # tuple update subcommand
    test tuple-update-1.0 {single attribute} -setup {
	set t [tuple create {Name string Age int Size double}\
	    {Name Andrew Age 20 Size 3.0}]
    } -body {
	tuple update t {Age 40}
    } -result {Tuple {Name string Age int Size double}\
	    {Name Andrew Age 40 Size 3.0}} -match tuple

    test tuple-update-2.0 {multiple attributes} -setup {
	set t [tuple create {Name string Age int Size double}\
	    {Name Andrew Age 20 Size 3.0}]
    } -body {
	tuple update t {Age 40 Size 33.0}
    } -result {Tuple {Name string Age int Size double}\
	    {Name Andrew Age 40 Size 33.0}} -match tuple

    test tuple-update-3.0 {unknown attribute} -setup {
	set t [tuple create {Name string Age int Size double}\
	    {Name Andrew Age 20 Size 3.0}]
    } -body {
	tuple update t {foo 40}
    } -result {unknown attribute name, "foo"} -returnCodes error

    test tuple-update-4.0 {bad type} -setup {
	set t [tuple create {Name string Age int Size double}\
	    {Name Andrew Age 20 Size 3.0}]
    } -body {
	tuple update t {Age foo}
    } -result {bad value type for value, "foo"} -returnCodes error

    # tuple wrap subcommand
    test tuple-wrap-1.0 {wrap 1 attribute} -setup {
	set t [tuple create {Name string Age int Size double}\
	    {Age 20 Name Andrew Size 3.0}]
    } -body {
	tuple wrap $t Props {Age}
    } -result {Tuple {Name string Size double Props {Tuple {Age int}}}\
	{Name Andrew Size 3.0 Props {Age 20}}} -match tuple

    test tuple-wrap-2.0 {wrap multiple attributes} -setup {
	set t [tuple create {Name string Age int Size double}\
	    {Age 20 Name Andrew Size 3.0}]
    } -body {
	tuple wrap $t Props {Age Size}
    } -result {Tuple {Name string Props {Tuple {Age int Size double}}}\
	{Name Andrew Props {Age 20 Size 3.0}}} -match tuple

    test tuple-wrap-3.0 {wrap all attributes} -setup {
	set t [tuple create {Name string Age int Size double}\
	    {Age 20 Name Andrew Size 3.0}]
    } -body {
	tuple wrap $t Props {Name Age Size}
    } -result {Tuple {Props {Tuple {Name string Age int Size double}}}\
	{Props {Name Andrew Age 20 Size 3.0}}} -match tuple

    test tuple-wrap-4.0 {non-existent attribute to wrap} -setup {
	set t [tuple create {Name string Age int Size double}\
	    {Age 20 Name Andrew Size 3.0}]
    } -body {
	tuple wrap $t Props {foo}
    } -result {unknown attribute name, "foo"} -returnCodes error

    test tuple-wrap-5.0 {wrap same attribute multiple times} -setup {
	set t [tuple create {Name string Age int Size double}\
	    {Age 20 Name Andrew Size 3.0}]
    } -body {
	tuple wrap $t Props {Name Age Name}
    } -result {duplicate attribute name, "Name"} -returnCodes error

    test tuple-wrap-6.0 {wrap attribute is a duplicate} -setup {
	set t [tuple create {Name string Age int Size double}\
	    {Age 20 Name Andrew Size 3.0}]
    } -body {
	tuple wrap $t Size {Name Age}
    } -result {duplicate attribute name, "Size"} -returnCodes error

    # relation shimmering tests
    test relation-shimmer-1.0 {dum relation} -body {
	set r {Relation {} {{}} {}}
	relation cardinality $r
	string length $r
	set r
    } -result {Relation {} {{}} {}} -match relation

    test relation-shimmer-2.0 {dee relation} -body {
	set r {Relation {} {{}} {{}}}
	relation cardinality $r
	string length $r
	set r
    } -result {Relation {} {{}} {{}}} -match relation

    test relation-shimmer-3.0 {degree 1, cardinality 0} -body {
	set r {Relation {a1 string} a1 {}}
	relation cardinality $r
	string length $r
	set r
    } -result {Relation {a1 string} a1 {}} -match relation

    test relation-shimmer-3.1 {degree 1, cardinality 1} -body {
	set r {Relation {a1 string} a1 {{a1 foo}}}
	relation cardinality $r
	string length $r
	set r
    } -result {Relation {a1 string} a1 {{a1 foo}}} -match relation

    test relation-shimmer-3.2 {degree 1, cardinality 2} -body {
	set r {Relation {a1 string} a1 {{a1 foo} {a1 bar}}}
	relation cardinality $r
	string length $r
	set r
    } -result {Relation {a1 string} a1 {{a1 foo} {a1 bar}}} -match relation

    test relation-shimmer-4.0 {tuple attr, degree 1, cardinality 0} -body {
	set r {Relation {a1 {Tuple {t1 string t2 string}}} {a1} {}}
	relation cardinality $r
	string length $r
	set r
    } -result {Relation {a1 {Tuple {t1 string t2 string}}} a1 {}}\
    -match relation

    test relation-shimmer-4.1 {tuple attr, degree 1, cardinality 1} -body {
	set r {Relation {a1 {Tuple {t1 string t2 string}}} {a1} {{a1 {t1 foo t2 bar}}}}
	relation cardinality $r
	string length $r
	set r
    } -result {Relation {a1 {Tuple {t1 string t2 string}}} a1 {{a1 {t1 foo t2 bar}}}}\
    -match relation

    test relation-shimmer-4.2 {tuple attr, degree 1, cardinality 2} -body {
	set r {Relation {a1 {Tuple {t1 string t2 string}}} {a1} {{a1 {t1 foo t2 bar}} {a1 {t1 foo2 t2 bar2}}}}
	relation cardinality $r
	string length $r
	set r
    } -result {Relation {a1 {Tuple {t1 string t2 string}}} a1 {{a1 {t1 foo t2 bar}} {a1 {t1 foo2 t2 bar2}}}}\
    -match relation

    test relation-shimmer-5.0 {relation attr, degree 1, cardinality 0} -body {
	set r {Relation {a1 {Relation {t1 string t2 string} {t1}}} {a1} {}}
	relation cardinality $r
	string length $r
	set r
    } -result {Relation {a1 {Relation {t1 string t2 string} t1}} a1 {}}\
    -match relation

    test relation-shimmer-5.1 {relation attr, degree 1, cardinality 1} -body {
	set r {Relation {a1 {Relation {t1 string t2 string} {t1}}} {a1} {{a1 {{t1 foo t2 bar}}}}}
	relation cardinality $r
	string length $r
	set r
    } -result {Relation {a1 {Relation {t1 string t2 string} t1}} a1 {{a1 {{t1 foo t2 bar}}}}}\
    -match relation

    test relation-shimmer-5.2 {relation attr, degree 1, cardinality 1} -body {
	set r {Relation {a1 {Relation {t1 string t2 string} {t1}}} {a1} {{a1 {{t1 foo t2 bar} {t1 foo2 t2 bar2}}}}}
	relation cardinality $r
	string length $r
	set r
    } -result {Relation {a1 {Relation {t1 string t2 string} t1}} a1 {{a1 {{t1 foo t2 bar} {t1 foo2 t2 bar2}}}}}\
    -match relation

    test relation-shimmer-6.0 {multiple identifiers} -body {
	set r {
	    Relation
	    {a1 string a2 string a3 string}
	    {a1 a2}
	    {
		{a1 a a2 b a3 c}
		{a1 d a2 e a3 f}
	    }
	}
	relation cardinality $r
	string length $r
	set r
    } -result {
	Relation
	{a1 string a2 string a3 string}
	{a1 a2}
	{
	    {a1 a a2 b a3 c}
	    {a1 d a2 e a3 f}
	}
    } -match relation

    # relation cardinality subcommand
    test relation-cardinality-1.0 {dum relation} -body {
	relation cardinality {Relation {} {{}} {}}
    } -result 0

    test relation-cardinality-2.0 {dee relation} -body {
	relation cardinality {Relation {} {{}} {{}}}
    } -result 1

    test relation-cardinality-3.0 {relation with 1 attribute} -body {
	relation cardinality {Relation {a1 string} a1 {}}
    } -result 0

    test relation-cardinality-3.0 {relation with 4 attributes} -body {
	relation cardinality $S
    } -result 5

    # relation degree subcommand
    test relation-degree-1.0 {dum relation} -body {
	relation degree {Relation {} {{}} {}}
    } -result 0

    test relation-degree-2.0 {single attribute} -body {
	relation degree {Relation {Name string} Name {}}
    } -result 1

    test relation-degree-3.0 {multiple attributes} -body {
	relation degree $S
    } -result 4

    # relation eliminate subcommand
    test relation-eliminate-1.0 {single attribute} -body {
	set r1 {Relation\
	    {Name string Number int Street string IsMale string}\
	    Name\
	    {{Name Andrew Number 599 Street Blackwood IsMale true}\
	    {Name Jane Street Main Number 300 IsMale false}\
	    {Name Fred Street Maple Number 599 IsMale true}}}
	relation eliminate $r1 Name
    } -result {Relation {Number int Street string IsMale string} {{Number Street IsMale}} {{Number 599 Street Blackwood IsMale true} {Number 300 Street Main IsMale false} {Number 599 Street Maple IsMale true}}}\
    -match relation

    test relation-eliminate-2.0 {multiple attributes} -body {
	set r1 {Relation\
	    {Name string Number int Street string IsMale string}\
	    Name\
	    {{Name Andrew Number 599 Street Blackwood IsMale true}\
	    {Name Jane Street Main Number 300 IsMale false}\
	    {Name Fred Street Maple Number 599 IsMale true}}}
	relation eliminate $r1 Number IsMale
    } -result {Relation {Name string Street string} Name {{Name Andrew Street Blackwood} {Name Jane Street Main} {Name Fred Street Maple}}}\
    -match relation

    test relation-eliminate-2.1 {multiple attributes} -body {
	set r1 {Relation\
	    {Name string Number int Street string IsMale string}\
	    Name\
	    {{Name Andrew Number 599 Street Blackwood IsMale true}\
	    {Name Jane Street Main Number 300 IsMale false}\
	    {Name Fred Street Maple Number 599 IsMale true}}}
	relation eliminate $r1 Name Street
    } -result {Relation {Number int IsMale string} {{Number IsMale}} {{Number 599 IsMale true} {Number 300 IsMale false}}}\
    -match relation

    test relation-eliminate-3.0 {nullary eliminate, non-empty relation} -body {
	set r1 {Relation\
	    {Name string Number int Street string IsMale string}\
	    Name\
	    {{Name Andrew Number 599 Street Blackwood IsMale true}\
	    {Name Jane Street Main Number 300 IsMale false}\
	    {Name Fred Street Maple Number 599 IsMale true}}}
	relation eliminate $r1
    } -result {Relation {Name string Number int Street string IsMale string} Name {{Name Andrew Number 599 Street Blackwood IsMale true} {Name Jane Number 300 Street Main IsMale false} {Name Fred Number 599 Street Maple IsMale true}}}\
    -match relation

    test relation-eliminate-4.0 {nullary eliminate, empty relation} -body {
	set r1 {Relation\
	    {Name string Number int Street string IsMale string}\
	    Name\
	    {}}
	relation eliminate $r1
    } -result {Relation {Name string Number int Street string IsMale string} Name {}}\
    -match relation

    # relation emptyof subcommand
    test relation-emptyof-1.0 {multiple attributes} -body {
	relation emptyof $S
    } -result {
	Relation
	{S# string SNAME string STATUS int CITY string}
	S#
	{}
    } -match relation

    # relation extend subcommand
    test relation-extend-1.0 {multiple body tuples} -body {
	set r1 {Relation {Name string Age int} Name\
	    {{Name Andrew Age 20}\
	    {Name George Age 20}\
	    {Name Fred Age 20}}}
	relation extend $r1 t AgeInMonths int {[tuple extract $t Age] * 12}
    } -result {
	Relation
	{Name string Age int AgeInMonths int}
	Name
	{
	    {Name Andrew Age 20 AgeInMonths 240}
	    {Name George Age 20 AgeInMonths 240}
	    {Name Fred Age 20 AgeInMonths 240}
	}
    } -match relation

    test relation-extend-2.0 {bad expression} -body {
	set r1 {Relation {Name string Age int} Name\
	    {{Name Andrew Age 20}\
	    {Name George Age 20}\
	    {Name Fred Age 20}}}
	relation extend $r1 t AgeInMonths int {[tuple extract $t foo] * 12}
    } -result {unknown attribute name, "foo"} -returnCodes error

    test relation-extend-3.0 {specify ordering} -body {
	set r1 {
	    Relation
	    {Name string Age int}
	    Name
	    {
		{Name Andrew Age 20}
		{Name George Age 20}
		{Name Fred Age 20}
	    }
	}
	set cnt -1
	relation extend $r1 -ascending Name t Order int {[incr cnt]}
    } -match relation -result {
	Relation
	{Name string Age int Order int}
	Name
	{
	    {Name Andrew Age 20 Order 0}
	    {Name George Age 20 Order 2}
	    {Name Fred Age 20 Order 1}
	}
    }

    test relation-extend-3.1 {specify ordering; bad command} -body {
	set r1 {
	    Relation
	    {Name string Age int}
	    Name
	    {
		{Name Andrew Age 20}
		{Name George Age 20}
		{Name Fred Age 20}
	    }
	}
	set cnt -1
	relation extend $r1 -ascending t Order int {[incr cnt]}
    } -returnCodes error -result {unknown attribute name, "t"}

    test relation-extend-3.2 {specify ordering; bad command} -body {
	set r1 {
	    Relation
	    {Name string Age int}
	    Name
	    {
		{Name Andrew Age 20}
		{Name George Age 20}
		{Name Fred Age 20}
	    }
	}
	set cnt -1
	relation extend $r1 -ascending Name
    } -returnCodes error -result {wrong # args: should be "relation extend relationValue ?-ascending | -descending attrList? tupleVarName ?attr1 expr1 ... attrN exprN?"}
    # HERE -- add tests

    # relation foreach subcommand
    test relation-foreach-1.0 {simple visit of suppliers} -body {
	set nameList [list]
	relation foreach sup $S {
	    lappend nameList [tuple extract $sup SNAME]
	}
	lsort $nameList
    } -result {Adams Blake Clark Jones Smith}

    test relation-foreach-2.0 {visit of suppliers ascending order} -body {
	set nameList [list]
	relation foreach sup $S ascending SNAME {
	    lappend nameList [tuple extract $sup SNAME]
	}
	set nameList
    } -result {Adams Blake Clark Jones Smith}

    test relation-foreach-3.0 {visit of suppliers descending order} -body {
	set nameList [list]
	relation foreach sup $S descending SNAME {
	    lappend nameList [tuple extract $sup SNAME]
	}
	set nameList
    } -result {Smith Jones Clark Blake Adams}

    test relation-foreach-4.0 {visit of suppliers ordered by multiple} -body {
	set nameList [list]
	relation foreach sup $S ascending {STATUS CITY} {
	    lappend nameList [tuple extract $sup SNAME]
	}
	set nameList
    } -result {Jones Smith Clark Adams Blake}

    # relation heading subcommand
    test relation-heading-1.0 {dum relation} -body {
	relation heading {Relation {} {{}} {}}
    } -result {Relation {} {{}}}

    test relation-heading-2.0 {dee relation} -body {
	relation heading {Relation {} {{}} {{}}}
    } -result {Relation {} {{}}}

    test relation-heading-3.0 {single attribute} -body {
	relation heading {Relation {Name string} Name {{Name Andrew}}}
    } -result {Relation {Name string} Name}

    test relation-heading-4.0 {multiple attributes} -body {
	relation heading $S
    } -result {Relation {S# string SNAME string STATUS int CITY string} S#}

    # relation identifiers subcommand
    test relation-identifiers-1.0 {dum relation} -body {
	relation identifiers {Relation {} {{}} {}}
    } -result {{}}

    test relation-identifiers-2.0 {single identifier} -body {
	relation identifiers {Relation {a1 string} a1 {}}
    } -result {a1}

    test relation-identifiers-3.0 {multiple identifiers} -body {
	relation identifiers {Relation {a1 string a2 string} {a1 a2} {}}
    } -result {a1 a2}

    test relation-identifiers-4.0 {multiple compound identifiers} -body {
	relation identifiers {Relation {a1 string a2 string a3 string} {{a1 a2} {a2 a3}} {}}
    } -result {{a1 a2} {a2 a3}}

    # relation intersect subcommand
    test relation-intersect-1.0 {dum relation} -body {
	set r {Relation {} {{}} {}}
	relation intersect $r $r
    } -result {Relation {} {{}} {}} -match relation

    test relation-intersect-2.0 {dee relation} -body {
	set r {Relation {} {{}} {{}}}
	relation intersect $r $r
    } -result {Relation {} {{}} {{}}} -match relation

    test relation-intersect-3.0 {disjoint sets} -body {
	set r1 {Relation {Name string Age int City string} Name\
	    {{Name Andrew Age 30 City Sunnyvale}}}
	set r2 {Relation {Name string Age int City string} Name\
	    {{Name George Age 20 City {San Jose}}}}
	relation intersect $r1 $r2
    } -result {Relation {Name string Age int City string} Name {}}\
    -match relation

    test relation-intersect-4.0 {same relation} -body {
	set r1 {Relation {Name string Age int City string} Name\
	    {{Name Andrew Age 30 City Sunnyvale}}}
	relation intersect $r1 $r1
    } -result {Relation {Name string Age int City string} Name\
	{{Name Andrew Age 30 City Sunnyvale}}}\
    -match relation

    test relation-intersect-5.0 {common tuples} -body {
	set r1 {Relation {Name string Age int City string} Name\
	    {{Name Andrew Age 30 City Sunnyvale}\
	    {Name George Age 20 City {San Jose}}}}
	set r2 {Relation {Name string Age int City string} Name\
	    {{Name George Age 20 City {San Jose}}}}
	relation intersect $r1 $r2
    } -result {Relation {Name string Age int City string} Name\
	{{Name George Age 20 City {San Jose}}}}\
    -match relation

    test relation-intersect-6.0 {multiple common tuples} -body {
	set r1 {Relation {Name string Age int City string} Name\
	    {{Name Andrew Age 30 City Sunnyvale}\
	    {Name George Age 20 City {San Jose}}}}
	set r2 {Relation {Name string Age int City string} Name\
	    {{Name George Age 20 City {San Jose}}\
	    {Name Fred Age 10 City Saratoga}\
	    {Name Andrew Age 30 City Sunnyvale}}}
	relation intersect $r1 $r2
    } -result {Relation {Name string Age int City string} Name\
	{{Name Andrew Age 30 City Sunnyvale}\
	{Name George Age 20 City {San Jose}}}}\
    -match relation

    test relation-intersect-7.0 {multiple relations} -body {
	set r1 {Relation {Name string Age int City string} Name\
	    {{Name Andrew Age 30 City Sunnyvale}\
	    {Name George Age 20 City {San Jose}}}}
	set r2 {Relation {Name string Age int City string} Name\
	    {{Name George Age 20 City {San Jose}}}}
	set r3 {Relation {Name string Age int City string} Name\
	    {{Name George Age 20 City {San Jose}}\
	    {Name Fred Age 10 City Saratoga}}}
	relation intersect $r1 $r2 $r3
    } -result {Relation {Name string Age int City string} Name\
	{{Name George Age 20 City {San Jose}}}}\
    -match relation

    test relation-intersect-8.0 {multiple relations, different order} -body {
	set r1 {Relation {Name string Age int City string} Name\
	    {{Name Andrew Age 30 City Sunnyvale}\
	    {Name George Age 20 City {San Jose}}}}
	set r2 {Relation {Age int Name string City string} Name\
	    {{Name George Age 20 City {San Jose}}}}
	set r3 {Relation {Age int City string Name string} Name\
	    {{Name George Age 20 City {San Jose}}\
	    {Name Fred Age 10 City Saratoga}}}
	relation intersect $r1 $r2 $r3
    } -result {Relation {Name string Age int City string} Name\
	{{Name George Age 20 City {San Jose}}}}\
    -match relation

    # relation is subcommand

    # relation equal operator
    test relation-is-equal-1.0 {dum relation} -body {
	set r {Relation {} {{}} {}}
	relation is $r equal {Relation {} {{}} {}}
    } -result 1

    test relation-is-equal-2.0 {dee relation} -body {
	set r {Relation {} {{}} {{}}}
	relation is $r equal {Relation {} {{}} {{}}}
    } -result 1

    test relation-is-equal-3.0 {same relations} -body {
	set r1 {Relation {Name string Age int City string} Name\
	    {{Name Andrew Age 30 City Sunnyvale}\
	    {Age 20 Name George City {San Jose}}\
	    {City Saratoga Age 10 Name Fred}}}
	set r2 {Relation {Name string Age int City string} Name\
	    {{Age 20 Name George City {San Jose}}\
	    {Name Andrew Age 30 City Sunnyvale}\
	    {City Saratoga Age 10 Name Fred}}}
	relation is $r1 equal $r2
    } -result 1

    test relation-is-equal-4.0 {different header order} -body {
	set r1 {Relation {Name string Age int City string} Name\
	    {{Name Andrew Age 30 City Sunnyvale}\
	    {Age 20 Name George City {San Jose}}\
	    {City Saratoga Age 10 Name Fred}}}
	set r2 {Relation {Name string City string Age int} Name\
	    {{Age 20 Name George City {San Jose}}\
	    {Name Andrew Age 30 City Sunnyvale}\
	    {City Saratoga Age 10 Name Fred}}}
	relation is $r1 equal $r2
    } -result 1

    test relation-is-equal-5.0 {different relations} -body {
	set r1 {Relation {Name string Age int City string} Name\
	    {{Name Andrew Age 30 City Sunnyvale}\
	    {Age 20 Name George City {San Jose}}\
	    {City Saratoga Age 10 Name Fred}}}
	set r2 {Relation {Name string City string Age int} Name\
	    {{Age 20 Name George City {San Jose}}\
	    {Name Andrew Age 40 City Sunnyvale}\
	    {City Saratoga Age 10 Name Fred}}}
	relation is $r1 equal $r2
    } -result 0

    test relation-is-equal-6.0 {different headings} -body {
	set r1 {Relation {Name string Age int City string} Name\
	    {{Name Andrew Age 30 City Sunnyvale}\
	    {Age 20 Name George City {San Jose}}\
	    {City Saratoga Age 10 Name Fred}}}
	set r2 {Relation {Name string Status int City string} Name\
	    {{Status 20 Name George City {San Jose}}\
	    {Name Andrew Status 30 City Sunnyvale}\
	    {City Saratoga Status 10 Name Fred}}}
	relation is $r1 equal $r2
    } -result {headings not equal, "Relation {Name string Status int City string} Name {{Name George Status 20 City {San Jose}} {Name Andrew Status 30 City Sunnyvale} {Name Fred Status 10 City Saratoga}}"}\
    -returnCodes error

    test relation-is-equal-7.0 {tuple valued attributes} -body {
	set r1 {
	    Relation
	    {	Name string
		Age int
		Address {Tuple {Number int Street string City string}}
	    }
	    Name
	    {
		{Name Andrew Age 30
		    Address {Number 200 Street Main City Sunnyvale}}
		{Age 20 Name George
		    Address {Number 300 Street Clay City {San Jose}}}
		{Address {Street 51st Number 100 City Saratoga}
		    Age 10 Name Fred}
	    }
	}
	set r2 {
	    Relation
	    {	Name string
		Address {Tuple {Number int Street string City string}}
		Age int
	    }
	    Name
	    {
		{   Address {City Sunnyvale Number 200 Street Main}
		    Age 30
		    Name Andrew
		}
		{   Age 20 
		    Name George
		    Address {Number 300 Street Clay City {San Jose}}
		}
		{   Name Fred
		    Address {Street 51st Number 100 City Saratoga}
		    Age 10
		}
	    }
	}
	relation is $r1 == $r2
    } -result 1

    test relation-is-equal-8.0 {relation valued attributes} -body {
	set r1 {
	    Relation
	    {	Name string
		Age int
		Addresses {
		    Relation
		    {Number int Street string City string}
		    {{Number Street City}}
		}
	    }
	    Name
	    {
		{   Name Andrew
		    Age 30
		    Addresses {
			{Number 200 Street Main City Sunnyvale}
		    }
		}
		{
		    Age 20
		    Name George
		    Addresses {
			{Number 300 Street Clay City {San Jose}}
		    }
		}
		{   Addresses {
			{Street 51st Number 100 City Saratoga}
		    }
		    Age 10
		    Name Fred
		}
	    }
	}
	set r2 {
	    Relation
	    {	Name string
		Age int
		Addresses {
		    Relation
		    {Number int Street string City string}
		    {{Number Street City}}
		}
	    }
	    Name
	    {
		{
		    Age 20
		    Addresses {
			{Number 300 Street Clay City {San Jose}}
		    }
		    Name George
		}
		{   Addresses {
			{Street 51st Number 100 City Saratoga}
		    }
		    Age 10
		    Name Fred
		}
		{   Name Andrew
		    Addresses {
			{Number 200 Street Main City Sunnyvale}
		    }
		    Age 30
		}
	    }
	}
	relation is $r1 == $r2
    } -result 1

    test relation-is-equal-8.1 {relation valued attributes, multi value} -body {
	set r1 {
	    Relation
	    {	Name string
		Age int
		Addresses {
		    Relation
		    {Number int Street string City string}
		    {{Number Street City}}
		}
	    }
	    Name
	    {
		{   Name Andrew
		    Age 30
		    Addresses {
			{Number 200 Street Main City Sunnyvale}
			{Number 201 Street Main City Sunnyvale}
			{Number 202 Street Main City Sunnyvale}
		    }
		}
		{
		    Age 20
		    Name George
		    Addresses {
			{Number 300 Street Clay City {San Jose}}
			{Number 301 Street Clay City {San Jose}}
			{Number 302 Street Clay City {San Jose}}
		    }
		}
		{   Addresses {
			{Street 51st Number 100 City Saratoga}
			{Street 51st Number 101 City Saratoga}
			{Street 51st Number 102 City Saratoga}
		    }
		    Age 10
		    Name Fred
		}
	    }
	}
	set r2 {
	    Relation
	    {	Name string
		Age int
		Addresses {
		    Relation
		    {Number int Street string City string}
		    {{Number Street City}}
		}
	    }
	    Name
	    {
		{
		    Age 20
		    Addresses {
			{Number 301 Street Clay City {San Jose}}
			{Number 300 Street Clay City {San Jose}}
			{Number 302 Street Clay City {San Jose}}
		    }
		    Name George
		}
		{   Addresses {
			{Street 51st Number 102 City Saratoga}
			{Street 51st Number 100 City Saratoga}
			{Street 51st Number 101 City Saratoga}
		    }
		    Age 10
		    Name Fred
		}
		{   Name Andrew
		    Addresses {
			{Number 201 Street Main City Sunnyvale}
			{Number 202 Street Main City Sunnyvale}
			{Number 200 Street Main City Sunnyvale}
		    }
		    Age 30
		}
	    }
	}
	relation is $r1 == $r2
    } -result 1

    # relation notequal operator
    test relation-is-notequal-1.0 {dum relation} -body {
	set r {Relation {} {{}} {}}
	relation is $r notequal {Relation {} {{}} {}}
    } -result 0

    test relation-is-notequal-2.0 {dee relation} -body {
	set r {Relation {} {{}} {{}}}
	relation is $r notequal {Relation {} {{}} {{}}}
    } -result 0

    test relation-is-notequal-3.0 {same relations} -body {
	set r1 {Relation {Name string Age int City string} Name\
	    {{Name Andrew Age 30 City Sunnyvale}\
	    {Age 20 Name George City {San Jose}}\
	    {City Saratoga Age 10 Name Fred}}}
	set r2 {Relation {Name string Age int City string} Name\
	    {{Age 20 Name George City {San Jose}}\
	    {Name Andrew Age 30 City Sunnyvale}\
	    {City Saratoga Age 10 Name Fred}}}
	relation is $r1 notequal $r2
    } -result 0

    test relation-is-notequal-4.0 {different header order} -body {
	set r1 {Relation {Name string Age int City string} Name\
	    {{Name Andrew Age 30 City Sunnyvale}\
	    {Age 20 Name George City {San Jose}}\
	    {City Saratoga Age 10 Name Fred}}}
	set r2 {Relation {Name string City string Age int} Name\
	    {{Age 20 Name George City {San Jose}}\
	    {Name Andrew Age 30 City Sunnyvale}\
	    {City Saratoga Age 10 Name Fred}}}
	relation is $r1 notequal $r2
    } -result 0

    test relation-is-notequal-5.0 {different relations} -body {
	set r1 {Relation {Name string Age int City string} Name\
	    {{Name Andrew Age 30 City Sunnyvale}\
	    {Age 20 Name George City {San Jose}}\
	    {City Saratoga Age 10 Name Fred}}}
	set r2 {Relation {Name string City string Age int} Name\
	    {{Age 20 Name George City {San Jose}}\
	    {Name Andrew Age 40 City Sunnyvale}\
	    {City Saratoga Age 10 Name Fred}}}
	relation is $r1 != $r2
    } -result 1

    # relation propersubset operator
    test relation-is-propersubset-1.0 {dum relation} -body {
	set r {Relation {} {{}} {}}
	relation is $r propersubsetof $r
    } -result 0

    test relation-is-propersubset-2.0 {dee relation} -body {
	set r {Relation {} {{}} {{}}}
	relation is $r propersubsetof $r
    } -result 0

    test relation-is-propersubset-3.0 {same relations} -body {
	set r1 {Relation {Name string Age int City string} Name\
	    {{Name Andrew Age 30 City Sunnyvale}\
	    {Age 20 Name George City {San Jose}}\
	    {City Saratoga Age 10 Name Fred}}}
	set r2 {Relation {Name string Age int City string} Name\
	    {{Age 20 Name George City {San Jose}}\
	    {Name Andrew Age 30 City Sunnyvale}\
	    {City Saratoga Age 10 Name Fred}}}
	relation is $r1 propersubsetof $r2
    } -result 0

    test relation-is-propersubset-4.0 {smaller 1st relation} -body {
	set r1 {Relation {Name string Age int City string} Name\
	    {{Name Andrew Age 30 City Sunnyvale}\
	    {City Saratoga Age 10 Name Fred}}}
	set r2 {Relation {Name string Age int City string} Name\
	    {{Age 20 Name George City {San Jose}}\
	    {Name Andrew Age 30 City Sunnyvale}\
	    {City Saratoga Age 10 Name Fred}}}
	relation is $r1 propersubsetof $r2
    } -result 1

    test relation-is-propersubset-5.0 {larger 1st relation} -body {
	set r1 {Relation {Name string Age int City string} Name\
	    {{Name Andrew Age 30 City Sunnyvale}\
	    {Age 20 Name George City {San Jose}}\
	    {City Saratoga Age 10 Name Fred}}}
	set r2 {Relation {Name string Age int City string} Name\
	    {{Age 20 Name George City {San Jose}}\
	    {City Saratoga Age 10 Name Fred}}}
	relation is $r1 < $r2
    } -result 0

    # relation propersuperset operator
    test relation-is-propersuperset-1.0 {dum relation} -body {
	set r {Relation {} {{}} {}}
	relation is $r propersuperset $r
    } -result 0

    test relation-is-propersuperset-2.0 {dee relation} -body {
	set r {Relation {} {{}} {{}}}
	relation is $r propersupersetof $r
    } -result 0

    test relation-is-propersuperset-3.0 {same relations} -body {
	set r1 {Relation {Name string Age int City string} Name\
	    {{Name Andrew Age 30 City Sunnyvale}\
	    {Age 20 Name George City {San Jose}}\
	    {City Saratoga Age 10 Name Fred}}}
	set r2 {Relation {Name string Age int City string} Name\
	    {{Age 20 Name George City {San Jose}}\
	    {Name Andrew Age 30 City Sunnyvale}\
	    {City Saratoga Age 10 Name Fred}}}
	relation is $r1 propersupersetof $r2
    } -result 0

    test relation-is-propersuperset-4.0 {larger 1st relation} -body {
	set r1 {Relation {Name string Age int City string} Name\
	    {{Name Andrew Age 30 City Sunnyvale}\
	    {Age 20 Name George City {San Jose}}\
	    {City Saratoga Age 10 Name Fred}}}
	set r2 {Relation {Name string Age int City string} Name\
	    {{Age 20 Name George City {San Jose}}\
	    {City Saratoga Age 10 Name Fred}}}
	relation is $r1 propersupersetof $r2
    } -result 1

    test relation-is-propersuperset-5.0 {smaller 1st relation} -body {
	set r1 {Relation {Name string Age int City string} Name\
	    {{Name Andrew Age 30 City Sunnyvale}\
	    {City Saratoga Age 10 Name Fred}}}
	set r2 {Relation {Name string Age int City string} Name\
	    {{Age 20 Name George City {San Jose}}\
	    {Name Andrew Age 30 City Sunnyvale}\
	    {City Saratoga Age 10 Name Fred}}}
	relation is $r1 > $r2
    } -result 0

    # relation subset operator
    test relation-is-subset-1.0 {dum relation} -body {
	set r {Relation {} {{}} {}}
	relation is $r subsetof $r
    } -result 1

    test relation-is-subset-2.0 {dee relation} -body {
	set r {Relation {} {{}} {{}}}
	relation is $r subsetof $r
    } -result 1

    test relation-is-subset-3.0 {same relations} -body {
	set r1 {Relation {Name string Age int City string} Name\
	    {{Name Andrew Age 30 City Sunnyvale}\
	    {Age 20 Name George City {San Jose}}\
	    {City Saratoga Age 10 Name Fred}}}
	set r2 {Relation {Name string Age int City string} Name\
	    {{Age 20 Name George City {San Jose}}\
	    {Name Andrew Age 30 City Sunnyvale}\
	    {City Saratoga Age 10 Name Fred}}}
	relation is $r1 subsetof $r2
    } -result 1

    test relation-is-subset-4.0 {smaller 1st relation} -body {
	set r1 {Relation {Name string Age int City string} Name\
	    {{Name Andrew Age 30 City Sunnyvale}\
	    {City Saratoga Age 10 Name Fred}}}
	set r2 {Relation {Name string Age int City string} Name\
	    {{Age 20 Name George City {San Jose}}\
	    {Name Andrew Age 30 City Sunnyvale}\
	    {City Saratoga Age 10 Name Fred}}}
	relation is $r1 subsetof $r2
    } -result 1

    test relation-is-subset-5.0 {larger 1st relation} -body {
	set r1 {Relation {Name string Age int City string} Name\
	    {{Name Andrew Age 30 City Sunnyvale}\
	    {Age 20 Name George City {San Jose}}\
	    {City Saratoga Age 10 Name Fred}}}
	set r2 {Relation {Name string Age int City string} Name\
	    {{Age 20 Name George City {San Jose}}\
	    {City Saratoga Age 10 Name Fred}}}
	relation is $r1 <= $r2
    } -result 0

    # relation superset operator
    test relation-is-superset-1.0 {dum relation} -body {
	set r {Relation {} {{}} {}}
	relation is $r supersetof $r
    } -result 1

    test relation-is-superset-2.0 {dee relation} -body {
	set r {Relation {} {{}} {{}}}
	relation is $r supersetof $r
    } -result 1

    test relation-is-superset-3.0 {same relations} -body {
	set r1 {Relation {Name string Age int City string} Name\
	    {{Name Andrew Age 30 City Sunnyvale}\
	    {Age 20 Name George City {San Jose}}\
	    {City Saratoga Age 10 Name Fred}}}
	set r2 {Relation {Name string Age int City string} Name\
	    {{Age 20 Name George City {San Jose}}\
	    {Name Andrew Age 30 City Sunnyvale}\
	    {City Saratoga Age 10 Name Fred}}}
	relation is $r1 supersetof $r2
    } -result 1

    test relation-is-superset-4.0 {larger 1st relation} -body {
	set r1 {Relation {Name string Age int City string} Name\
	    {{Name Andrew Age 30 City Sunnyvale}\
	    {Age 20 Name George City {San Jose}}\
	    {City Saratoga Age 10 Name Fred}}}
	set r2 {Relation {Name string Age int City string} Name\
	    {{Age 20 Name George City {San Jose}}\
	    {City Saratoga Age 10 Name Fred}}}
	relation is $r1 supersetof $r2
    } -result 1

    test relation-is-superset-5.0 {smaller 1st relation} -body {
	set r1 {Relation {Name string Age int City string} Name\
	    {{Name Andrew Age 30 City Sunnyvale}\
	    {City Saratoga Age 10 Name Fred}}}
	set r2 {Relation {Name string Age int City string} Name\
	    {{Age 20 Name George City {San Jose}}\
	    {Name Andrew Age 30 City Sunnyvale}\
	    {City Saratoga Age 10 Name Fred}}}
	relation is $r1 >= $r2
    } -result 0

    # relation isempty subcommand
    test relation-isempty-1.0 {dum relation} -body {
	relation isempty {Relation {} {{}} {}}
    } -result 1

    test relation-isempty-2.0 {dee relation} -body {
	relation isempty {Relation {} {{}} {{}}}
    } -result 0

    test relation-isempty-3.0 {multiple body tuples} -body {
	relation isempty $S
    } -result 0

    # relation isnotempty subcommand
    test relation-isnotempty-1.0 {dum relation} -body {
	relation isnotempty {Relation {} {{}} {}}
    } -result 0

    test relation-isnotempty-2.0 {dee relation} -body {
	relation isnotempty {Relation {} {{}} {{}}}
    } -result 1

    test relation-isnotempty-3.0 {multiple body tuples} -body {
	relation isnotempty $S
    } -result 1

    # relation join subcommand
    test relation-join-1.0 {one common attribute} -body {
	set r1 {Relation {Name string Age int} Name\
	    {{Age 20 Name George}\
	    {Age 10 Name Fred}}}
	set r2 {Relation {Age int City string} Age\
	    {{Age 30 City Sunnyvale}\
	    {Age 20 City {San Jose}}\
	    {City Saratoga Age 10}}}
	relation join $r1 $r2
    } -result {
	Relation
	{Name string Age int City string}
	{{Name Age}}
	{
	    {Name George Age 20 City {San Jose}}
	    {Name Fred Age 10 City Saratoga}
	}
    } -match relation

    test relation-join-2.0 {multiple common attribute} -body {
	set r1 {Relation {Name string Age int City string} Name\
	    {{Age 20 Name George City {San Jose}}\
	    {City Saratoga Age 10 Name Fred}}}
	set r2 {Relation {Age int City string} Age\
	    {{Age 30 City Sunnyvale}\
	    {Age 20 City {San Jose}}\
	    {City Saratoga Age 10}}}
	relation join $r1 $r2
    } -result {
	Relation
	{Name string Age int City string}
	{{Name Age}}
	{
	    {Name George Age 20 City {San Jose}}
	    {Name Fred Age 10 City Saratoga}
	}
    } -match relation

    test relation-join-3.0 {no common attribute} -body {
	set r1 {Relation {Name string Age int} Name\
	    {{Age 20 Name George}\
	    {Age 10 Name Fred}}}
	set r2 {Relation {Status int City string} Status\
	    {{Status 30 City Sunnyvale}\
	    {Status 20 City {San Jose}}\
	    {City Saratoga Status 10}}}
	relation join $r1 $r2
    } -result {
	Relation
	{Name string Age int Status int City string}
	{{Name Status}}
	{
	    {Name George Age 20 Status 30 City Sunnyvale}
	    {Name George Age 20 Status 20 City {San Jose}}
	    {Name George Age 20 Status 10 City Saratoga}
	    {Name Fred Age 10 Status 30 City Sunnyvale}
	    {Name Fred Age 10 Status 20 City {San Jose}}
	    {Name Fred Age 10 Status 10 City Saratoga}
	}
    } -match relation

    test relation-join-4.0 {join with DEE; identity} -body {
	set r1 {Relation {Name string Age int} Name\
	    {{Age 20 Name George}\
	    {Age 10 Name Fred}}}
	set r2 {Relation {} {{}} {{}}}
	relation is [relation join $r1 $r2] == $r1
    } -result 1

    test relation-join-5.0 {join with DUM ; empty} -body {
	set r1 {Relation {Name string Age int} Name\
	    {{Age 20 Name George}\
	    {Age 10 Name Fred}}}
	set r2 {Relation {} {{}} {}}
	relation is [relation join $r1 $r2] == [relation empty $r1]
    } -result 1

    test relation-join-6.0 {specified attribute} -body {
	set r1 {Relation {Name string Age int City string} Name\
	    {{Age 20 Name George City {San Jose}}\
	    {City Saratoga Age 10 Name Fred}}}
	set r2 {Relation {Status int City string} Status\
	    {{Status 30 City Sunnyvale}\
	    {Status 20 City {San Jose}}\
	    {City Saratoga Status 10}}}
	relation join $r1 $r2 -using {City City}
    } -result {
	Relation
	{Name string Age int City string Status int}
	{{Name Status}}
	{
	    {Name George Age 20 City {San Jose} Status 20}
	    {Name Fred Age 10 City Saratoga Status 10}
	}
    } -match relation

    # relation list subcommand
    test relation-list-1.0 {multiple tuples} -body {
	set r {
	    Relation
	    {SNAME string}
	    SNAME
	    {
		{SNAME Smith}
		{SNAME Jones}
		{SNAME Blake}
		{SNAME Clark}
		{SNAME Adams}
	    }
	}
	lsort [relation list $r]
    } -result {Adams Blake Clark Jones Smith}

    test relation-list-2.0 {one tuple} -body {
	relation list {Relation {Name string} Name {{Name Fred}}}
    } -result {Fred}

    # relation minus subcommand
    test relation-minus-1.0 {dum relation} -body {
	set r {Relation {} {{}} {}}
	relation minus $r $r
    } -result {Relation {} {{}} {}} -match relation

    test relation-minus-2.0 {dee relation} -body {
	set r {Relation {} {{}} {{}}}
	relation minus $r $r
    } -result {Relation {} {{}} {}} -match relation

    test relation-minus-3.0 {disjoint sets} -body {
	set r1 {Relation {Name string Age int City string} Name\
	    {{Name Andrew Age 30 City Sunnyvale}}}
	set r2 {Relation {Name string Age int City string} Name\
	    {{Name George Age 20 City {San Jose}}}}
	relation minus $r1 $r2
    } -result {Relation {Name string Age int City string} Name\
	{{Name Andrew Age 30 City Sunnyvale}}} -match relation

    test relation-minus-4.0 {same sets} -body {
	set r1 {Relation {Name string Age int City string} Name\
	    {{Name Andrew Age 30 City Sunnyvale}}}
	relation minus $r1 $r1
    } -result {Relation {Name string Age int City string} Name {}}\
    -match relation

    # relation project subcommand
    test relation-project-1.0 {single attribute} -body {
	set r1 {Relation \
	    {Name string Number int Street string IsMale string}\
	    Name\
	    {{Name Andrew Number 599 Street Blackwood IsMale true}\
	    {Name Jane Street Main Number 300 IsMale false}\
	    {Name Fred Street Maple Number 599 IsMale true}}}
	relation project $r1 Name
    } -result {Relation {Name string} Name {{Name Andrew} {Name Jane} {Name Fred}}}\
    -match relation

    test relation-project-2.0 {multiple attributes} -body {
	set r1 {Relation \
	    {Name string Number int Street string IsMale string}\
	    Name\
	    {{Name Andrew Number 599 Street Blackwood IsMale true}\
	    {Name Jane Street Main Number 300 IsMale false}\
	    {Name Fred Street Maple Number 599 IsMale true}}}
	relation project $r1 Number IsMale
    } -result {Relation {Number int IsMale string} {{Number IsMale}} {{Number 599 IsMale true} {Number 300 IsMale false}}}\
    -match relation

    test relation-project-3.0 {nullary projection, non-empty relation} -body {
	set r1 {Relation \
	    {Name string Number int Street string IsMale string}\
	    Name\
	    {{Name Andrew Number 599 Street Blackwood IsMale true}\
	    {Name Jane Street Main Number 300 IsMale false}\
	    {Name Fred Street Maple Number 599 IsMale true}}}
	relation project $r1
    } -result {Relation {} {{}} {{}}} -match relation

    test relation-project-4.0 {nullary projection, empty relation} -body {
	set r1 {Relation \
	    {Name string Number int Street string IsMale string}\
	    Name\
	    {}}
	relation project $r1
    } -result {Relation {} {{}} {}} -match relation

    test relation-project-5.0 {non-existant attribute} -body {
	set r1 {Relation \
	    {Name string Number int Street string IsMale string}\
	    Name\
	    {{Name Andrew Number 599 Street Blackwood IsMale true}\
	    {Name Jane Street Main Number 300 IsMale false}\
	    {Name Fred Street Maple Number 599 IsMale true}}}
	relation project $r1 foo
    } -result {unknown attribute name, "foo"} -returnCodes error

    test relation-project-6.0 {duplicate projection attribute} -body {
	set r1 {Relation \
	    {Name string Number int Street string IsMale string}\
	    Name\
	    {{Name Andrew Number 599 Street Blackwood IsMale true}\
	    {Name Jane Street Main Number 300 IsMale false}\
	    {Name Fred Street Maple Number 599 IsMale true}}}
	relation project $r1 Name Name
    } -result {Relation {Name string} Name {{Name Andrew} {Name Jane} {Name Fred}}}\
    -match relation

    test relation-project-7.0 {reorder attributes} -body {
	set r1 {Relation \
	    {Name string Number int Street string IsMale string}\
	    {{Number Street}}\
	    {{Name Andrew Number 599 Street Blackwood IsMale true}\
	    {Name Jane Street Main Number 300 IsMale false}\
	    {Name Fred Street Maple Number 599 IsMale true}}}
	relation project $r1 Number Street IsMale
    } -result {Relation {Number int Street string IsMale string} {{Number Street}} {{Number 599 Street Blackwood IsMale true} {Number 300 Street Main IsMale false} {Number 599 Street Maple IsMale true}}}\
    -match relation

    # relation rename subcommand
    test relation-rename-1.0 {single attribute} -body {
	set r {Relation {Name string} Name {{Name Andrew}}}
	relation rename $r Name foo
    } -result {Relation {foo string} foo {{foo Andrew}}}\
    -match relation

    test relation-rename-2.0 {multiple attributes} -body {
	set r {Relation {Name string Age int City string} Name\
	{{Name Andrew Age 30 City Sunnyvale}\
	 {Name George Age 20 City {San Jose}}}}
	relation rename $r Age Status
    } -result {Relation {Name string Status int City string} Name\
	{{Name Andrew Status 30 City Sunnyvale}\
	 {Name George Status 20 City {San Jose}}}}\
     -match relation

    test relation-rename-2.1 {multiple attributes, multiple renames} -body {
	set r {Relation {Name string Age int City string} Name\
	{{Name Andrew Age 30 City Sunnyvale}\
	 {Name George Age 20 City {San Jose}}}}
	relation rename $r Age Status City Town
    } -result {Relation {Name string Status int Town string} Name\
	{{Name Andrew Status 30 Town Sunnyvale}\
	 {Name George Status 20 Town {San Jose}}}}\
    -match relation

    # relation restrict subcommand
    test relation-restrict-1.0 {match on one attribute} -body {
	set r {Relation {Name string Age int City string} Name\
	    {{Name Andrew Age 30 City Sunnyvale}\
	    {Age 20 Name George City {San Jose}}\
	    {City Saratoga Age 10 Name Fred}}}
	relation restrict $r t {[tuple extract $t Age] < 20}
    } -result {Relation {Name string Age int City string} Name\
	{{Name Fred Age 10 City Saratoga}}}\
    -match relation

    test relation-restrict-2.0 {match on several attributes} -body {
	set r {Relation {Name string Age int City string} Name\
	    {{Name Andrew Age 30 City Sunnyvale}\
	    {Age 20 Name George City {San Jose}}\
	    {City Saratoga Age 10 Name Fred}}}
	relation restrict $r t\
	    {[tuple extract $t Age] < 20 &&\
	    [string index [tuple extract $t City] 0] ne "S"}
    } -result {Relation {Name string Age int City string} Name {}}\
    -match relation

    test relation-restrict-3.0 {bad expression} -body {
	set r {Relation {Name string Age int City string} Name\
	    {{Name Andrew Age 30 City Sunnyvale}\
	    {Age 20 Name George City {San Jose}}\
	    {City Saratoga Age 10 Name Fred}}}
	relation restrict $r selected {< 20}
    } -result {syntax error in expression "< 20": unexpected operator <}\
    -returnCodes error

    # relation restrictone subcommand
    test relation-restrictone-1.0 {match the only id} -body {
	set r {Relation {Name string Age int City string} Name\
	    {{Name Andrew Age 30 City Sunnyvale}\
	    {Age 20 Name George City {San Jose}}\
	    {City Saratoga Age 10 Name Fred}}}
	relation restrictone $r {Name Fred}
    } -result {Relation {Name string Age int City string} Name\
	{{Name Fred Age 10 City Saratoga}}} -match relation

    test relation-restrictone-2.0 {no match} -body {
	set r {Relation {Name string Age int City string} Name\
	    {{Name Andrew Age 30 City Sunnyvale}\
	    {Age 20 Name George City {San Jose}}\
	    {City Saratoga Age 10 Name Fred}}}
	relation restrictone $r {Name Alice}
    } -result {Relation {Name string Age int City string} Name {}}\
    -match relation

    test relation-restrictone-3.0 {bad identifier} -body {
	set r {Relation {Name string Age int City string} Name\
	    {{Name Andrew Age 30 City Sunnyvale}\
	    {Age 20 Name George City {San Jose}}\
	    {City Saratoga Age 10 Name Fred}}}
	relation restrictone $r {City Sunnyvale}
    } -result {attributes do not constitute an identifier, "City Sunnyvale"}\
    -returnCodes 1

    test relation-restrictone-4.0 {multiple identifiers} -body {
	set r {Relation {Name string Age int} {Name Age}\
	    {{Name Andrew Age 10} {Name George Age 20} {Name Fred Age 30}}}
	relation restrictone $r {Age 30}
    } -result {Relation {Name string Age int} {Name Age} {{Name Fred Age 30}}}\
    -match relation

    # relation semijoin subcommand
    test relation-semijoin-1.0 {one common attribute} -body {
	set r1 {Relation {Name string Age int} Name\
	    {{Age 20 Name George}\
	    {Age 10 Name Fred}}}
	set r2 {Relation {Age int City string} Age\
	    {{Age 30 City Sunnyvale}\
	    {Age 20 City {San Jose}}\
	    {City Saratoga Age 10}}}
	relation semijoin $r1 $r2
    } -result {
	Relation
	{Name string Age int}
	Name
	{
	    {Name George Age 20}
	    {Name Fred Age 10}
	}
    } -match relation

    test relation-semijoin-2.0 {one common attribute} -body {
	set r1 {Relation {Name string Age int} Name\
	    {{Age 20 Name George}\
	    {Age 10 Name Fred}}}
	set r2 {Relation {Age int City string} Age\
	    {{Age 35 City Sunnyvale}\
	    {Age 20 City {San Jose}}\
	    {City Saratoga Age 15}}}
	relation semijoin $r1 $r2
    } -result {
	Relation
	{Name string Age int}
	Name
	{
	    {Name George Age 20}
	}
    } -match relation
    # HERE -- add tests

    # relation semiminus subcommand
    test relation-semiminus-1.0 {one common attribute} -body {
	relation semiminus $S $SP
    } -result {
	Relation
	{S# string SNAME string STATUS int CITY string}
	S#
	{
	    {S# S5 SNAME Adams STATUS 30 CITY Athens}
	}
    } -match relation

    test relation-semiminus-2.0 {one common attribute} -body {
	relation semiminus $SP $S
    } -result {
	Relation
	{S# string P# string QTY int}
	{{S# P#}}
	{}
    } -match relation
    # HERE -- add tests

    # relation times subcommand
    test relation-times-1.0 {single attribute, square relation} -body {
	set r1 {Relation {Name string} Name {{Name Andrew}}}
	set r2 {Relation {XName string} XName {{XName Andrew}}}
	relation times $r1 $r2
    } -result {Relation {Name string XName string} {{Name XName}}\
	{{Name Andrew XName Andrew}}}\
    -match relation

    test relation-times-2.0 {single attribute times dee} -body {
	set r1 {Relation {Name string} Name {{Name Andrew}}}
	set r2 {Relation {} {{}} {{}}}
	relation times $r1 $r2
    } -result {Relation {Name string} Name {{Name Andrew}}}\
    -match relation

    test relation-times-3.0 {single attribute times dum} -body {
	set r1 {Relation {Name string} Name {{Name Andrew}}}
	set r2 {Relation {} {{}} {}}
	relation times $r1 $r2
    } -result {Relation {Name string} Name {}}\
    -match relation

    test relation-times-4.0 {single attribute, cube relation} -body {
	set r1 {Relation {Name string} Name {{Name Andrew}}}
	set r2 {Relation {XName string} XName {{XName Andrew}}}
	set r3 {Relation {YName string} YName {{YName Andrew}}}
	relation times $r1 $r2 $r3
    } -result {Relation {Name string XName string YName string}\
	{{Name XName YName}} {{Name Andrew XName Andrew YName Andrew}}}\
    -match relation

    test relation-times-5.0 {multiple attributes, square relation} -body {
	set r1 {Relation {Name string} Name {{Name Andrew} {Name George}}}
	set r2 {Relation {Status int} Status {{Status 20} {Status 30}}}
	relation times $r1 $r2
    } -result {
	Relation
	{Name string Status int}
	{{Name Status}}
	{
	    {Name Andrew Status 20}
	    {Name Andrew Status 30}
	    {Name George Status 20}
	    {Name George Status 30}
	}
    } -match relation

    test relation-times-6.0 {attribute name conflict} -body {
	set r1 {Relation {Name string} Name {{Name Andrew}}}
	relation times $r1 $r1
    } -result {duplicate attribute name, "Relation {Name string} Name {{Name Andrew}}"}\
    -returnCodes error

    test relation-times-6.1 {attribute name conflict, third relation} -body {
	set r1 {Relation {Name string} Name {{Name Andrew}}}
	set r2 {Relation {Status int} Status {{Status 20} {Status 30}}}
	relation times $r1 $r2 $r1
    } -result {duplicate attribute name, "Relation {Name string} Name {{Name Andrew}}"}\
    -returnCodes error

    # relation tuple subcommand
    test relation-tuple-1.0 {single attribute} -body {
	set t [relation tuple {Relation {Name string} Name {{Name Andrew}}}]
	tuple equal $t {Tuple {Name string} {Name Andrew}}
    } -result 1

    test relation-tuple-2.0 {multiple attributes} -body {
	set r {Relation {Name string Age int} Name {{Name Andrew Age 20}}}
	set t [relation tuple $r]
	tuple equal $t {Tuple {Name string Age int} {Name Andrew Age 20}}
    } -result 1

    test relation-tuple-3.0 {body too long} -body {
	set r {Relation {Name string Age int} Name\
	    {{Name Andrew Age 20} {Name George Age 20}}}
	relation tuple $r
    } -result {relation must have cardinality of one, "Relation {Name string Age int} Name {{Name Andrew Age 20} {Name George Age 20}}"} -returnCodes error

    # relation ungroup subcommand
    test relation-ungroup-1.0 {two attribute relation} -body {
	set r {Relation {Name string\
	    Dog {Relation {DogName string Breed string} DogName}} Name\
	    {{Name Fred Dog\
		{{DogName Rover Breed Terrier}\
		{DogName Missy Breed Poodle}}}\
	    {Name Alice Dog {{DogName Tiger Breed Setter}}}}}
	relation ungroup $r Dog
    } -result {
	Relation
	{Name string DogName string Breed string}
	{{Name DogName}}
	{
	    {Name Fred DogName Rover Breed Terrier}
	    {Name Fred DogName Missy Breed Poodle}
	    {Name Alice DogName Tiger Breed Setter}
	}
    } -match relation

    test relation-ungroup-2.0 {duplicate attribute name} -body {
	set r {Relation {Name string\
	    Dog {Relation {Name string Breed string} Name}} Name\
	    {{Name Fred Dog\
		{{Name Rover Breed Terrier}\
		{Name Missy Breed Poodle}}}\
	    {Name Alice Dog {{Name Tiger Breed Setter}}}}}
	relation ungroup $r Dog
    } -result {duplicate attribute name, "during ungroup operation"}\
    -returnCodes error

    test relation-ungroup-2.1 {unknown attribute name} -body {
	set r {
	    Relation
	    {Name string Dog {Relation {Name string Breed string} Name}}
	    Name
	    {
		{Name Fred Dog
		    {
			{Name Rover Breed Terrier}
			{Name Missy Breed Poodle}
		    }
		}
		{Name Alice Dog {{Name Tiger Breed Setter}}
		}
	    }
	}
	relation ungroup $r Weight
    } -result {unknown attribute name, "during ungroup operation"}\
    -returnCodes error

    test relation-ungroup-2.2 {attribute not a relation} -body {
	set r {
	    Relation
	    {Name string Dog {Relation {Name string Breed string} Name}}
	    Name
	    {
		{Name Fred Dog
		    {
			{Name Rover Breed Terrier}
			{Name Missy Breed Poodle}
		    }
		}
		{Name Alice Dog {{Name Tiger Breed Setter}}
		}
	    }
	}
	relation ungroup $r Name
    } -result\
	{attribute must be of a Relation type, "during ungroup operation"}\
    -returnCodes error

    test relation-ungroup-3.0 {common tuples in the relation attribute} -body {
	set r {Relation {Name string\
	    Dog {Relation {DogName string Breed string} DogName}}\
		{{Name Dog}}\
	    {{Name Fred Dog\
		{{DogName Rover Breed Terrier}\
		{DogName Missy Breed Poodle}}}\
	    {Name Fred Dog {{DogName Rover Breed Terrier}}}}}
	relation ungroup $r Dog
    } -result {
	Relation
	{Name string DogName string Breed string}
	{{Name DogName}}
	{
	    {Name Fred DogName Rover Breed Terrier}
	    {Name Fred DogName Missy Breed Poodle}
	}
    } -match relation

    test relation-ungroup-4.0 {attributes beyond ungrouped attribute} -body {
	set r {
	    Relation
	    {Name string Dog {
		Relation
		{DogName string Breed string}
		DogName} Weight int}
	    Name
	    {
		{
		    Name Fred
		    Dog {
			{DogName Rover Breed Terrier}
			{DogName Missy Breed Poodle}
		    }
		    Weight 20
		}
		{
		    Name Alice
		    Dog {
			{DogName Tiger Breed Setter}
		    }
		    Weight 40
		}
	    }
	}
	relation ungroup $r Dog
    } -result {
	Relation
	{Name string Weight int DogName string Breed string}
	{{Name DogName}}
	{
	    {Name Fred Weight 20 DogName Rover Breed Terrier}
	    {Name Fred Weight 20 DogName Missy Breed Poodle}
	    {Name Alice Weight 40 DogName Tiger Breed Setter}
	}
    } -match relation

    # relation union subcommand
    test relation-union-1.0 {dum relation} -body {
	set r {Relation {} {{}} {}}
	relation union $r $r
    } -result {Relation {} {{}} {}} -match relation

    test relation-union-2.0 {dee relation} -body {
	set r {Relation {} {{}} {{}}}
	relation union $r $r
    } -result {Relation {} {{}} {{}}} -match relation

    test relation-union-3.0 {disjoint sets} -body {
	set r1 {Relation {Name string Age int City string} Name\
	    {{Name Andrew Age 30 City Sunnyvale}}}
	set r2 {Relation {Name string Age int City string} Name\
	    {{Name George Age 20 City {San Jose}}}}
	relation union $r1 $r2
    } -result {Relation {Name string Age int City string} Name\
	{{Name Andrew Age 30 City Sunnyvale}\
	 {Name George Age 20 City {San Jose}}}}\
     -match relation

    test relation-union-4.0 {relations with common tuples} -body {
	set r1 {Relation {Name string Age int City string} Name\
	    {{Name Andrew Age 30 City Sunnyvale}}}
	set r2 {Relation {Name string Age int City string} Name\
	    {{Name Andrew Age 30 City Sunnyvale}\
	    {Name George Age 20 City {San Jose}}}}
	relation union $r1 $r2
    } -result {
	Relation
	{Name string Age int City string}
	Name
	{
	    {Name Andrew Age 30 City Sunnyvale}
	    {Name George Age 20 City {San Jose}}
	}
    } -match relation

    test relation-union-5.0 {union of more than two relations} -body {
	set r1 {Relation {Name string Age int City string} Name\
	    {{Name Andrew Age 30 City Sunnyvale}}}
	set r2 {Relation {Name string Age int City string} Name\
	    {{Name George Age 20 City {San Jose}}}}
	set r3 {Relation {Name string Age int City string} Name\
	    {{Name Fred Age 10 City Saratoga}}}
	relation union $r1 $r2 $r3
    } -result {
	Relation
	{Name string Age int City string}
	Name
	{
	    {Name Andrew Age 30 City Sunnyvale}
	    {Name George Age 20 City {San Jose}}
	    {Name Fred Age 10 City Saratoga}
	}
    } -match relation

    test relation-union-6.0 {union of more than two, common tuples } -body {
	set r1 {Relation {Name string Age int City string} Name\
	    {{Name Andrew Age 30 City Sunnyvale}}}
	set r2 {Relation {Name string Age int City string} Name\
	    {{Name George Age 20 City {San Jose}}\
	    {Name Andrew Age 30 City Sunnyvale}}}
	set r3 {Relation {Name string Age int City string} Name\
	    {{Name George Age 20 City {San Jose}}\
	    {Name Fred Age 10 City Saratoga}}}
	relation union $r1 $r2 $r3
    } -result {
	Relation
	{Name string Age int City string}
	Name
	{
	    {Name Andrew Age 30 City Sunnyvale}
	    {Name George Age 20 City {San Jose}}
	    {Name Fred Age 10 City Saratoga}
	}
    } -match relation

    test relation-union-7.0 {type mismatch} -body {
	set r1 {Relation {Name string Age int City string} Name\
	    {{Name Andrew Age 30 City Sunnyvale}}}
	set r2 {Relation {Name string City string} Name\
	    {{Name George City {San Jose}}}}
	relation union $r1 $r2
    } -result {headings not equal, "Relation {Name string City string} Name {{Name George City {San Jose}}}"}\
    -returnCodes error

    test relation-union-8.0 {equal headings of different order} -body {
	set r1 {Relation {Name string Age int City string} Name\
	    {{Name Andrew Age 30 City Sunnyvale}}}
	set r2 {Relation {Age int Name string City string} Name\
	    {{Name George Age 20 City {San Jose}}}}
	relation union $r1 $r2
    } -result {
	Relation
	{Name string Age int City string}
	Name
	{
	    {Name Andrew Age 30 City Sunnyvale}
	    {Name George Age 20 City {San Jose}}
	}
    } -match relation

    # examples from the Date book
    test date-example-1.0 {Get suppliers who supply all parts} -body {
	set pnums [relation project $P P#]
	relation restrict $S sx\
	    {[relation is\
		[relation project\
		    [relation restrict $SP spx\
		    {[tuple extract $spx S#] eq [tuple extract $sx S#]}] P#]\
	    equal $pnums]}
    } -result {
	Relation
	{S# string SNAME string STATUS int CITY string}
	S#
	{
	    {S# S1 SNAME Smith STATUS 20 CITY London}
	}
    } -match relation

    test date-example-3.0\
	{Get supplier names for suppliers who supply part P2} -body {
	relation project\
	    [relation restrict [relation join $SP $S]\
		r1 {[tuple extract $r1 P#] eq "P2"}] SNAME
    } -result {
	Relation
	{SNAME string}
	SNAME
	{
	     {SNAME Smith}
	     {SNAME Jones}
	     {SNAME Blake}
	     {SNAME Clark}
	}
    } -match relation

    test date-example-4.0 {Get supplier name for suppliers who supply at\
    least one red part} -body {
	relation project\
	    [relation join\
	    [relation project\
	    [relation join\
		[relation restrict $P t1\
		    {[tuple extract $t1 COLOR] eq "Red"}] $SP] S#] $S] SNAME
    } -result {
	Relation
	{SNAME string}
	SNAME
	{
	     {SNAME Smith}
	     {SNAME Jones}
	     {SNAME Clark}
	}
    } -match relation

    test date-example-6.0 {Get all pairs of supplier numbers such that\
	the suppliers concerned are colocated} -body {
	relation project\
	    [relation restrict\
		[relation join\
		    [relation project [relation rename $S S# SA] SA CITY]\
		    [relation project [relation rename $S S# SB] SB CITY]\
		]\
		t1 {[string compare\
		    [tuple extract $t1 SA] [tuple extract $t1 SB]] < 0}\
	    ]\
	SA SB
    } -result {
	Relation
	{SA string SB string}
	{{SA SB}}
	{
	    {SA S1	SB S4}
	    {SA S2	SB S3}
	}
    } -match relation

    test date-example-7.0 {Get supplier info for suppliers who supply part P2}\
    -body {
	relation semijoin $S\
	    [relation restrict $SP r1 {[tuple extract $r1 P#] eq "P2"}]
    } -result {
	Relation
	{S# string SNAME string STATUS int CITY string}
	S#
	{
	    {S# S1 SNAME Smith STATUS 20 CITY London}
	    {S# S2 SNAME Jones STATUS 10 CITY Paris}
	    {S# S3 SNAME Blake STATUS 30 CITY Paris}
	    {S# S4 SNAME Clark STATUS 20 CITY London}
	}
    } -match relation

    test date-example-8.0 {Get supplier info for suppliers who do not\
	supply part P2} -body {
	relation semiminus $S\
	    [relation restrict $SP r1 {[tuple extract $r1 P#] eq "P2"}]
    } -result {
	Relation
	{S# string SNAME string STATUS int CITY string}
	S#
	{
	    {S# S5 SNAME Adams STATUS 30 CITY Athens}
	}
    } -match relation

    cleanupTests
}

namespace delete ::ral::test
