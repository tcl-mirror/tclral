[manpage_begin raloo n 0.1]
[comment {
# This software is copyrighted 2008 by G. Andrew Mangogna.
# The following terms apply to all files associated with the software unless
# explicitly disclaimed in individual files.
# 
# The authors hereby grant permission to use, copy, modify, distribute,
# and license this software and its documentation for any purpose, provided
# that existing copyright notices are retained in all copies and that this
# notice is included verbatim in any distributions. No written agreement,
# license, or royalty fee is required for any of the authorized uses.
# Modifications to this software may be copyrighted by their authors and
# need not follow the licensing terms described here, provided that the
# new terms are clearly indicated on the first page of each file where
# they apply.
# 
# IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY FOR
# DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING
# OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY DERIVATIVES
# THEREOF, EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT.  THIS SOFTWARE
# IS PROVIDED ON AN "AS IS" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE
# NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS,
# OR MODIFICATIONS.
# 
# GOVERNMENT USE: If you are acquiring this software on behalf of the
# U.S. government, the Government shall have only "Restricted Rights"
# in the software and related documentation as defined in the Federal
# Acquisition Regulations (FARs) in Clause 52.227.19 (c) (2).  If you
# are acquiring the software on behalf of the Department of Defense,
# the software shall be classified as "Commercial Computer Software"
# and the Government shall have only "Restricted Rights" as defined in
# Clause 252.227-7013 (c) (1) of DFARs.  Notwithstanding the foregoing,
# the authors grant the U.S. Government and others acting in its behalf
# permission to use and distribute the software in accordance with the
# terms specified in this license.
# 
#  *++
# MODULE:
#   raloo.man -- documentation for the raloo package
# ABSTRACT:
#   This file contains the documentation for the raloo package.
#   This package is part of TclRAL. This file is in Tcl Markup Language
#   format.
# $RCSfile: raloo.man,v $
# $Revision: 1.6 $
# $Date: 2008/04/30 03:30:49 $
#  *--
}]
[moddesc "raloo"]
[titledesc "Relation Oriented Programming"]
[copyright "2008 by G. Andrew Mangogna"]
[require raloo [opt 0.1]]
[description]

[package raloo] is a relation oriented programming extention to Tcl.
It uses the relational algebra of TclRAL along with the object oriented
facilities of TclOO to create a
relation oriented programming system that emphasizes
strongly structured, transactionally consistent data,
an event driven, state machine execution architecture
and a Tcl object oriented command style for computations.
[package raloo] is patterned after the execution semantics of
Executable UML (see Mellor, Stephen J. and Balcer, Marc J.,
[emph "Executable UML: A Foundation for Model-Driven Architecture"],
Addison-Wesley, 2002, ISBN: 0-201-74804-5).
[package raloo] contains a number of concepts that enable programming at
a higher level of abstraction. However this manual page does not explain
all these concepts in detail. It is primarily a reference to the
commands of the [package raloo] package.

[para]
The [package raloo] package exports one command, [cmd Domain].
[cmd Domain] is a TclOO class which exports the [cmd create] method.
[cmd Domain] does not export the [cmd new] method as we insist that all
domains be given an explicit name.

[section "Domain Methods"]
A [emph Domain] is the unit of encapsulation in [package raloo].
A Domain is intended to deal with a single, cohesive subject matter,
however, the precise contents of a Domain are an element of the design.
The [cmd Domain] class exports a few methods, the most important of
which is the [cmd create] command.

[list_begin definitions]

[call [cmd "::raloo::Domain create"] [arg name] [opt [arg script]]]
The [cmd create] method creates a new Domain named [arg name].
If given, [arg script] contains a Tcl script that defines the characteristics
of the Domain (see [sectref "Domain Definition"], below).
The Domain object is created in a namespace that is the same as [arg name],
resolved relative to the current namespace if [arg name] is not given as
fully qualified.

[call [arg domain] [cmd define] [opt [arg script]]]
A Domain can be incrementally defined by invoking the [cmd define] method.
This method evaluates [arg script] in the same context as the script
evaluation is done when a Domain is created.
This allows large domains to be defined in more managable pieces.
In particular, the [cmd define] method makes it possible to separate the
definition of the domain from one if its potential instance populations.

[call [arg domain] [cmd transaction] [arg [opt script]]]

[call [arg domain] [cmd destroy]]
The [cmd destroy] method destroys the given [cmd domain] along with all
of its component classes and relationships.

[list_end]

[subsection "Domain Definition"]
Domains consist of the following entities:
[list_begin item]
[item] Asynchonous Services
[item] Synchonous Services
[item] Classes
[item] Relationships
[item] Associative Relationships
[item] Generalizations
[list_end]
During Domain creation or when executing the [cmd define] method for a domain,
the [arg script] argument is evaluated in a context where the following
definition commands are available.

[list_begin definitions]

[call [cmd AsyncService] [arg name] [arg argList] [arg body]]
The [cmd AsyncService] command defines [arg name] as an asynchronous
service of the domain.
[arg name] appears as an exported method of the domain.
The [arg argList] argument gives the formal parameters of the operation
in the same way as for the [cmd proc] command.
The [arg body] argument is the body of the asynchronous service.
Asynchronous services begin a new thread of control
(see [sectref "Threads of Control"], below).
This implies that asynchronous services always return immediately and have
no return value.
The [arg body] of the asynchronous service is executed when the
thread of control is started.

[call [cmd SyncService] [arg name] [arg argList] [arg body]]
The [cmd SyncService] command defines [arg name] as a synchronous service
of the domain.
Synchronous services execute as a transaction on the class data, but do not
start a thread of control.

[call [cmd Class] [arg name] [arg script]]
The [cmd Class] command defines a class within a Domain.
Each class of a Domain is created in a namespace with the same name as
[arg name] relative to the Domain's namespace.
In addition, a [emph relvar] by the same name is created.
The [arg script] argument is evaluated in a context where procedures
that define the properties of class are available
(see [sectref "Class Definition"], below).
Each class defined with the [cmd Class] command becomes a TclOO class
command.
See [sectref "Class Methods"] below for the method of the created class.

[call [cmd Relationship] [arg relName] [arg refngClass] [arg relSpec]\
	[arg refToClass] [opt [arg script]]]
The [cmd Relationship] command defines a relationship named [arg relName]
within the defined Domain.
A Relationship is a referential association between a Referring Class
named [arg refngClass] and a Referred-To Class named [arg refToClass]
(not necessarily distinct).
The cardinality of the reference is given by [arg relSpec].
[arg relSpec] is of the form "f->t", where [emph f] is one
of *, +, ? or 1 and [emph t] is one of ? or 1.
An arbitrary number of hyphens (-) and the single greater than (>) characters
are ignored syntactic sugar and are optional.
The direction of the relationship is taken to left to right or from
[arg refngClass] to [arg refToClass].
The direction is significant in the reflexive case ([emph i.e.] when
[arg refngClass] is the same as [arg refToClass]).
The [arg script] argument, if present is evaluated in a context
where the specifics of the referential attribute mapping can be specified
(see [sectref "Relationship Definition"] below).
The [cmd Relationship] command establishes that one or more attributes
in the [arg refngClass] class have values that are the same as
a corresponding set of attributes in the [arg refToClass] class.
The set of attributes referenced in the [arg refToClass] must form an
identifier of [arg refToClass].
The [arg refToClass] argument may contain an optional leading asterisk (*)
or asterisk followed by a single decimal digit (e.g. *2).
If present, this means that the reference is to be to the identifier numbered
by the given decimal digit or to identifier 1 if no digit is given.
The [arg relSpec] gives the cardinality of the reference and the significant
characters are meant to be mnemonic of their use in regular expressions:
* ==> zero or more, + ==> 1 or more, ? ==> at most one, 1 ==> exactly one.
So a [arg relSpec] argument of [cmd +--->1] states that every instance
of [arg refngClass] references exactly one instance of [arg refToClass] and
that every instance of [arg refToClass] is referred to by one or more instances
of [arg refngClass]
If no [arg script] is given,
then it is assumed that [arg refngClass] contains referring
attributes that have the same name as the selected identifying attributes
of [arg refToClass].

[call [cmd AssocRelationship] [arg name] [arg source] [arg assocSpec]\
	[arg target] [opt [arg script]]]
The [cmd AssocRelationship] command defines an associative relationship
named [arg name] within the Domain.
An Associative Relationship is a referential association between two classes
(not necessarily distinct)
where the referring attributes are held in a third class
(which must be distinct from the participating classes).
The direction of the relationship is taken to be from left [arg source] class
to the right [arg target] class.
The [arg assocSpec] is of the form "f-A->t", where both [emph f] and [emph t]
are indications of the cardinality of the relationship and
are one of *, +, ?, or 1 and [emph A] is the name of the associative class.
An arbitrary number of hyphens (-) and the single greater than (>) characters
are ignored syntactic sugar and are optional.
The cardinality characters are interpreted the same as for the
[cmd Relationship] command.
If [arg script] is absent, then the attribute references are determined by
name as for [cmd Relationship].
In this case, the referring attributes are members of the Associative Class
and there are referred to attributes in both of the participating classes.
In the reflexive case, ([emph i.e.] when [arg source] and [arg target] are
the same),
[arg script] must be present to resolve the attribute naming ambiguity.
The [arg script] may contain commands as given in the
[sectref "Associative Relationship Definition"] section below.


[call [cmd Generalization] [arg name] [arg supertype] [arg script]]
The [cmd Generalization] command defines a generalization
relationship named [arg name] within the defined Domain.
A Generalization Relationship is a referential association between a
[arg supertype] class and a set of [emph subtype] classes that completely
partitions [arg supertype] into disjoint subtypes.
The [arg script] argument is executed in a context where the
the subtype classes and referential attribute mapping may be defined
(see [sectref "Generalization Relationship Definition"] below).

[list_end]

[subsection "Class Definition"]
Classes consist of the following entities:
[list_begin item]
[item] Attributes
[item] Class-based Operations
[item] Instance-based Operations
[item] Lifecycles
[list_end]

The class definition [arg script] is executed in a context where the
following commands may be used to define the characteristics of the class.

[list_begin definitions]
[call [cmd Attribute] [arg name-type-list]]
The [cmd Attribute] defines the attributes of the class.
[cmd Attribute] may be invoked multple times and the effect is cumulative.
The [arg name-type-list] is a list of doubles giving the name of the
attribute and its data type.
The data type must be a valid Tcl type (e.g. string, int, list ...).
If the attribute name is preceded by and asterisk (*) or an asterisk and
a single decimal digit ([emph e.g.] *2),
then that attribute is designated an identifying attribute.
The set of attributes designated by asterisks constitute an identifier
for the class.
Each class must have at least one identifier.
Classes may have multiple identifiers and attributes may be identifying
attributes in multiple identifiers.
However, no identifier may be a subset of another identifier.
Instances of the any class must be unique in the values of all their
identifiers.
An asterisk without a decimal number is taken to signify identifier 1
([emph i.e.] * ==> *1).
If an attribute belongs to muliple identifiers, then the asterisk notation
is simply concatenated together.
For example:
[example {
    Attribute {
	*Name string
	*2Id int
	Color string
    }
}]
defines three attributes, two of which are identifying attributes.
Two identifiers are given, each of which has one identifying attribute.
The case of :
[example {
    Attribute {
	*Group string
	**2Name string
	*2Section int
	Size double
    }
}]
defines four attributes with two identifiers.
Identifier 1 consists of [emph Group] and [emph Name].
Identifier 2 consists of [emph Name] and [emph Section].
Notice that [emph Name] is an attribute in both identifiers.

[call [cmd ClassOp] [arg name] [arg argList] [arg body]]
The [cmd ClassOp] command defines a class based operation called [arg name].
The [arg argList] argument gives the argument list for the operation
and the [arg body] argument gives the Tcl script for the operation.
These arguments have the same meaning as for the [cmd proc] command.
This command creates a class based method for the class being defined.

[call [cmd InstOp] [arg name] [arg argList] [arg body]]
The [cmd InstOp] command define an instance based operation called [arg name].
The [arg argList] argument gives the argument list for the operation
and the [arg body] argument gives the Tcl script for the operation.
These arguments have the same meaning as for the [cmd proc] command.
This command creates a object method for the class being defined.

[call [cmd Lifecycle] [arg script]]
The [cmd Lifecycle] command specifies that the class being defined will
be associated with a state machine and will respond to events sent to it.
The [arg script] argument is evaluated in a context where commands are
available to specify the states and transition of the state machine.
See the [sectref "Lifecycle Definition"] section below.

[list_end]

[subsection "Relationship Definition"]
The [arg script] argument of the [cmd Relationship] command is evaluated
in a context where the following commands may be invoked to
specify further the details of the relationship.

[list_begin definitions]
[call [cmd RefMap] [arg refAttrMappingList]]
The [cmd RefMap] command takes a single argument that is a list of triples
of the form: refngAttrName -> refToAttrName.
Here, [arg refngAttrName] is the name of an attribute in [arg refngClass] and
[arg refToAttrName] is the name of an attribute in [arg refToClass].
The [arg ->] argument is syntactic sugar and its value is ignored.
Each triple in [arg script] establishes a referential attribute
correspondence.
The set of [arg refToAttrName] attributes in [arg refAttrMappingList]
must constitute the selected identifier of [arg refToClass].

[call [cmd Assigner] [arg script]]
The [cmd Assigner] command specifies that the relationship is competitive
and requires a state machine to arbitrate its instances.
The [arg script] argument is evaluated in a context where commands
can be used to specify the competitive relationship state machine
(see [sectref "Assigner Definition"] below).

[list_end]

[subsection "Associative Relationship Definition"]
Since the associative class in an associative relationship has referential
attributes referring to both the target and source classes, two
commands are available to specify those referential attribute mappings.

The [arg script] argument of the [cmd Relationship] command is evaluated
in a context where the following commands may be invoked to
specify further the details of the associative relationship.
[list_begin definitions]
[call [cmd FwrdRefMap] [arg refAttrMappingList]]
The [cmd FwrdRefMap] command specifies the referential mapping in the
forward direction of the relationship.
The [arg refAttrMappingList] is a list of triples in the same form as
for the [cmd RefMap] command.
This mapping specifies the attributes in the associative class that
reference attributes in the target class of the associative relationship.

[call [cmd BackRefMap] [arg refAttrMappingList]]
The [cmd BackRefMap] command specifies the referential mapping in the
backward direction of the relationship.
The [arg refAttrMappingList] is a list of triples in the same form as
for the [cmd RefMap] command.
This mapping specifies the attributes in the associative class that
reference attributes in the source class of the associative relationship.

[call [cmd Assigner] [arg script]]
The [cmd Assigner] command specifies that the associative relationship
is competitive and requires a state machine to arbitrate its instances.
The [arg script] argument is evaluated in a context where commands
can be used to specify the competitive relationship state machine
(see [sectref "Assigner Definition"] below).
[list_end]

[subsection "Generalization Relationship Definition"]
[list_begin definitions]
[call [cmd SubType] [arg subtypeName] [arg [opt attrRefMappingList]]]
[list_end]
The [cmd SubType] command defines a class named [arg subtypeName] to be
a subtypes of [arg supertype].
The [arg attrRefMappingList] argument, if present, is a list of triples
of the form: refngAttrName -> refToAttrName.
This list is interpreted in the same manner as for the
[cmd RefMap], [cmd FwrdRefMap] and [cmd BackRefMap] commands above,
namely as the explicit enumeration of the attributes in the subtype
which refer to the corresponding attributes in the supertype.
If the [arg attrRefMappingList] argument is not present, then the referential
attributes are assumed to have the same name.

[subsection "Lifecycle Definition"]
The lifecycles of classes are specified as Moore type state machines.
This means that processing is associated with the state and is executed
upon entry into the a state.
[emph Events] cause transitions between states and may also carry parameters.
Those parameters are then given to the state action when it is executed.
It is necessary that the parameter signature of an event match that of the
state into which it causes a transition.
The lifecycle definition script defines the state and transitions for the
state machine.
No separate event defintions are required since the events can be
deduced from the transition definitions.
However, states must be defined before they can be mentioned in a transition
definition.

[list_begin definitions]
[call [cmd State] [arg name] [arg argList] [arg body]]
The [cmd State] command defines a state in the state machine for the
class being defined.
The state is named [arg name] and has a parameter signature given
by [arg argList].
Any event causing a transition into this state is presumed to have the
same parameter signature and it is an error for the same event to cause
transitions to states that differ in their parameter signatures.
Upon the transition into the state, [arg body] is executed.
The state machine is not considered to be in a state until the
action has been completed.
The action [arg body] must not block or wait
since this will prevent the dispatch of other events.

[call [cmd Transition] [arg state] - [arg event] -> [arg newState]]
The [cmd Transition] command defines a transition of the state machine for
the class being defined.
This command specifies that when the state machine is in state [arg state]
and the event called [arg event] is received that the machine enter
the state [arg newState].
Any action associated with [arg newState] is executed as the transition
occurs.
If [arg state] is the at sign (@),
then the transition is a [emph creation] transition and [arg event]
is known as a creation event.
Generating creation events provide a means to asynchronously
create class instances.
The second (-) and fourth (->) arguments are syntactic sugar and the actual
parameter values are ignored.
Conceptually, the lifecycle state machine is governed by a transition
matrix mapping current state and event to a new state.
Each [cmd Transition] command specifies one cell in the conceptual
transition matrix.

[call [cmd DefaultInitialState] [arg state]]
The [cmd DefaultInitialState] command specifies that state that serves
as the initial state of the state machine if no other initial state
is specified when an instance is created.
If the [cmd DefaultInitialState] command does not appear in the lifecycle
definition, then the first state defined by a [cmd State] command is take
as the default initial state.
[emph N.B.] that no state action is executed when instances are synchronously
created.
It follows then that the action code of any default initial state that
has no incoming transitions is unreachable.

[call [cmd DefaultTransition] [arg "IG | CH"]]
The [cmd DefaultTransition] command specifies what is to be done for
all transitions that are not specified by a [cmd Transition] command.
The choices are to ignore the event (IG) or to specify that receiving
the event is can't happen (CH) and therefore is an error.
By default, all transitions not mentioned in [cmd Transition] commands
are deemed to be "CH".
This command may be used to change that default.

[list_end]

[subsection "Assigner Definition"]
The definition of an Assigner uses the same commands as the definition
of a Class Lifecycle, namely, [cmd State], [cmd Transition],
[cmd DefaultInitialState] and [cmd DefaultTransition].
Note that the Assigner state machines are distinct from class state machines
and is associated with the competitive Relationship.
However, Assigners may be either Single Assigners or Multiple Assigners.
For Single Assigners, only a single instance of the state machine is created
and Multiple Assigners my have many instances.
So in addition to the Lifecycle commands, one addition command is available
for an Assigner to declare whether it is a Multiple Assigner.

[list_begin definitions]

[call [cmd IdentifyBy] [arg className]]
If the [arg script] of an [cmd Assigner] includes the invocation of the
[cmd IdentifyBy] command, then the [cmd Assigner] is a [emph Multiple]
[cmd Assigner].
The [arg className] argument give the name of a Class whose identifier will
specify the identifier of the Multiple Assigner.
The identifying Class may be considered to partition the classes that
participate in the relationship in to a set of equivalence classes
for the purpose of controlling the relationship instances.
The [arg className] may use the asterisk (*) notation to specify which
of the identifiers of the class is to be used as the identifier for the
Multiple Assigner.

[list_end]

[section "Class Methods"]
The objects created from the classes of a Domain are unusual in many respects
for object created in convention object oriented schemes.
In [package raloo] all the object instance data is stored as tuples in a
relvar.
Thus classes have a very close correspondence to relvars and objects
of a class refer to a set of tuples in the relvar and those objects are
sometimes referred to as instance reference sets.
An instance reference set, like any set,
may be empty or refer to one or more tuples in the relvar.
However, an instance reference set may only refer to tuples of the
class from which it was created.

[list_begin definitions]
[call [arg class] [method selectOne]\
    [arg [opt "attr1 value1 attr2 value2 ..."]]]
The [method selectOne] method creates an object of [arg class] containing
an instance reference set
that refers to at most one tuple in class [arg class] which has
the same value for one of its identifiers as the given attribute values.
The set of [arg "attrN valueN"] arguments must constitute an identifier
of [arg class].
The cardinality of the object refence is either zero or one.

[example {
set fred [Owner selectOne OwnerName Fred]
}]

[call [arg class] [method selectWhere] [arg expression]]
The [method selectWhere] method creates an object of [arg class]
containing an instance reference set that refer to those tuples of [arg class]
where [arg expression] evaluates to true.
The [arg expression] argument is an ordinary Tcl expression.
Each tuple attribute is placed in a Tcl variable by the same name.

[example {
set oldDogs [Dog selectWhere {$Age > 12}]
}]

[call [arg class] [cmd createInstance] [arg "attr1 value1"]\
    [arg "attr2 value2"] [arg ...]]
The [method createInstance] inserts a tuple into relvar represented by
[arg class] and returns an object that references the newly inserted instance.
The set of [arg "attrN valueN"] arguments must specify a value for all
attributes of [arg class].
If [arg class] is an active class ([emph i.e.] it has a lifecycle),
then the instances placed in the default initial state.
[emph N.B.] it is a corrollary of the state machine execution rules that
any code associated with an initial state that has no incoming transitions
will never be executed.

[example {
set ginger [Dog createInstance Name Ginger Age 3 Breed Poodle]
}]

[call [arg class] [cmd insert] [arg "attr1 value1"] [arg "attr2 value2"]\
    [arg ...]]
The [method insert] inserts a tuple into the relvar represented by [arg class].
No object command is created by this method.
The return value is a relation value of cardinality one that contains the
inserted tuple.
The set of [arg "attrN valueN"] arguments must specify a value for all
attributes of [arg class].

[call [arg class] [cmd delete] [arg "attr1 value1"] [arg "attr2 value2"]\
    [arg ...]]
The [method delete] deletes at most one tuple from the relvar represented
by [arg class].
The set of [arg "attrN valueN"] arguments must constitute an identifier
of [arg class].

[call [arg class] [cmd update] [arg attrValueList] [arg attrName] [arg value]]
The [method update] method modifies the value of the attribute [arg attrName]
to be [arg value] for that tuple whose identifier matches the attribute
value pairs in [arg attrValueList].
If no tuple matches [arg attrValueList] then the relvar associated with
the class is unmodified.

[call [arg class] [cmd cardinality]]
The [method cardinality] returns the number of tuples in the relvar
represented by [arg class].

[call [arg class] [cmd degree]]
The [method degree] returns the number of attributes in the relvar
represented by [arg class].

[call [arg class] [cmd format] [arg [opt sortAttrList]] [arg [opt title]]]
The [method format] returns a string that is a printable tabular
representation of the [arg class].
If given, the table is sorted by the attributes of [arg sortAttrList].
If given, the [arg title] is used as a caption for the table.
[list_end]

[section "Active Class Methods"]
[list_begin definitions]
[call [arg class] [cmd generate] [arg attrValueList] [arg event]\
    [arg [opt "param1 param2 ..."]]]
If the lifecycle of a class defines a creation event, ([emph i.e.] and
event from the pseudo-initial state),
then the class [method generate] method is the means of delivering
the creation event.
[example {
set ginger [Dog createInstance Name Ginger Age 3 Breed Poodle]
$ginger generate Bark Volume 27
}]

[call [arg class] [method createInstanceInState] [arg state]\
    [arg [opt "attr1 value1 attr2 value2 ..."]]]
Active classes allow instances to be created in any state.
The [method createInstanceInState] operates like the [method createInstance]
method but allows the initial state to be specified.
If [method createInstance] is invoked on an active class,
then the instance is created in the default initial state.

[call [arg class] [cmd insertInState] [arg state]\
    [arg [opt "attr1 value1 attr2 value2 ..."]]]
The [method insertInState] method is analogous to the [method insert] and
provides a means of inserting an instance in a particular state.

[list_end]

[section "Instance References"]
The objects of raloo classes hold references to a subset of tuples in
the [class class] from which they were created.
Instances have a set of methods themselves.

[list_begin definitions]
[call [arg inst] [cmd selectOne] [arg "attr1 value1"] [arg "attr2 value2"]\
    [arg ...]]
The [method selectOne] method replaces the reference of [arg inst] with a
new one that refers to the tuple whose attribute match those of the
[arg "attrN valueN"] arguments.
The set of [arg "attrN valueN"] arguments must constitute an identifier
of [arg class].
[emph N.B.] that this method operates the same as the [method selectOne]
method for classes except the reference of the object is modified rather than
creating a new object.

[call [arg inst] [cmd selectWhere] [arg expression]]
The [method selectWhere] method replaces the reference of [arg inst] with a
new one that refers to the tuples where the [arg expression] evaluates to true.
The [arg expression] argument may refer to variable that have the same
name as the attributes of [arg inst].

[call [arg inst] [cmd selectAny] [arg expression]]
The [method selectAny] method replaces the reference of [arg inst] with a
new one that refers to an arbitrarily selected instance from the set
of instances where [arg expression] evaluates to true.
The cardinality of [arg inst] after the method will be either zero or one.

[call [arg inst] [cmd selectRelated] [arg relName1] [arg relName2] [arg ...]]
The [method selectRelated] method creates a new instance reference set
of the class at the end of the referential chain given by the
[arg relNameN] arguments.
The [arg relNameN] arguments are the names of relationships defined with
the current Domain.
Relationship traversal may be in the forward direction of the relationship
or in the backward direction by placing a tilde (~) character immediately
before the relationship name.
Relationship [arg relName1] must originate at the class of which [arg inst]
is an object and the path defined by the [arg relNameX] arguments must
exist.
The resulting object references tuples in the class that terminates the
traversal given the [arg relnameN].

[example {
set owner [Owner selectOne OwnerName Fred]
set freddogs [$owner selectedRelated R1]
}]

[call [arg inst] [cmd readAttr] [arg attr1] [arg [opt "attr2 ..."]]]
The [method readAttr] returns the values of the attributes given by
the [arg attrN] arguments.
If only one attribute name is given, then it is returned as a simple value.
If multiple attribute names are given, then the values are returned as a list.

[call [arg inst] [cmd writeAttr] [arg "attr1 value1"]\
	[arg [opt "attr2 value2 ..."]]]
[call [arg inst] [method with] [arg attrList] [arg script]]
The [method with] method assigns the values of the attributes in
[arg attrList] to variables of the same name as the attributes and
executes script.
The [arg script] may then refer to variables that have the same name as the
attributes of [arg inst].
The cardinality of [arg inst] must be 1.

[call [arg inst] [method assign] [arg attr] [arg expression]]
The [method assign] sets the current value of [arg attr] to a variable
by the same name and evaluates [arg expression] via the [cmd expr] command.
The result of the expression evaluation is then
assigned to the attribute.

[call [arg inst] [cmd relate] [arg relName] [arg targetInst]]
The [method relate] method sets the referential attributes of [arg inst]
and [arg targetInst] in such a manner so that the two instances are
now related by the relationship given by [arg relName].
Both [arg inst] and [arg targetInst] must be from classes that participate
in [arg relName].
If the relationship traversal from [arg inst] to [arg targetInst] is in the
reverse direction of the relationship definition, then [arg relName] must
be preceeded by a tilde character (~).

[call [arg inst] [cmd relateAssoc] [arg relName] [arg targetInst]\
    [arg [opt "attr1 value1"]] [arg [opt "attr2 value2"]] [arg ...]]
The [method relateAssoc] method creates an instance of the associative
class of the relationship [arg relName] and
sets the referential attributes of the new instance so as to relate
[arg inst] and [arg targetInst].
If the associative class has attributes other than then referential
attributes of the relationship,
then these additional attributes are supplied by the [arg "attrN valueN"]
arguments.
If the relationship traversal from [arg inst] to [arg targetInst] is in the
reverse direction of the relationship definition, then [arg relName] must
be preceeded by a tilde character (~).

[call [arg inst] [cmd unrelate] [arg relName] [arg targetInst]]
The [method unrelate] method sets the referential attributes of [arg inst]
and [arg targetInst] so that they are no longer related to each other
by the relationship given by [arg relName].

[call [arg inst] [cmd reclassify] [arg relName] [arg targetClass]\
    [arg [opt "attr1 value1"]] [arg [opt "attr2 value2"]] [arg ...]]
The [method reclassify] method changes the subtype of [arg inst] to be
that of [arg targetClass].
The return value is the object command of the new subtype.
Conceptually, [arg inst] is deleted and a new instance of [arg targetClass]
is created and related to the same supertype instance that was related
to [arg inst].
After the method, the cardinality of [arg inst] is zero.
If instances of [arg targetClass] have any attribute other than the referential
attributes of [arg relName],
they must be supplied in the [arg "attrN valueN"] arguments.

[call [arg inst] [cmd delete]]
The [method delete] method deletes all the tuples referenced by [arg inst].
After the method completes, the cardinality of [arg inst] is zero.

[call [arg inst] [cmd cardinality]]
Returns the number of tuple referenced by [arg inst].

[call [arg inst] [cmd isempty]]
Returns a boolean value of true if [arg inst] references no tuple
and false otherwise.

[call [arg inst] [cmd isnotempty]]
Return a boolean value of true if [arg inst] references at least one tuple
and false otherwise.

[call [arg inst] [cmd format] [arg [opt sortAttrList]] [arg [opt title]]]
Returns a printable string giving a tablular representation of the tuples
referenced by [arg inst].
If given, the table is sorted by the attributes of [arg sortAttrList].
If given, the [arg title] is used as a caption for the table.

[list_end]

[section "Active Instance References"]
Objects of classes that have a lifecycle are considered to be [emph active].
Active instances can receive events and their behavior depends upon the
sequence of events they have received.

[list_begin definitions]
[call [arg inst] [cmd generate] [arg event]\
    [arg [opt "name1 value1 name2 value2 ..."]]]
The [method generate] delivers the [arg event] event to [arg inst].
If the event carries supplimental data, then event data must be given
as a set of name / value pairs.

[call [arg inst] [cmd generateDelayed] [arg time] [arg event]\
    [arg [opt "name1 value1 name2 value2 ..."]]]
The [method generateDelayed] method arranges for the event, [arg event], to be
delivered to [arg inst] after at least [arg time] milliseconds have
elapsed.
Any supplimental data associated with [arg event] must be specified in
the [arg "nameN valueN"] arguments.
Delivery of a delayed event starts a new thread of control in the domain
(see [sectref "Threads of Control"]).
Only one delayed event may be outstanding for any given [arg event] and
sender / receiver instance pair.
If [method generateDelayed] is invoked when there is already an outstanding
delayed event for [arg event] with the same sender / receiver pair,
then the previous event is cancelled and the new delayed event replaces it.

[call [arg inst] [cmd cancelDelayed] [arg event]]

[call [arg inst] [cmd delayedRemaining] [arg event]]

[list_end]

[para]

[section "Threads of Control"]
The [package raloo] package supports both synchronous processing and
asynchronous processing.
Asynchronous processing is captured in state machines which have the ability
to suspend a sequence of computations and resume them at a later time.
As state machines interact, one generating events to others, the concept
of a thread of control arises.
A thread of control starts when upon invocation of an Asynchronous Service
or when a Delayed Event is dispatched.
The thread of control is the time evolving tree of class state
machine interactions.
Each node in the tree represents one instance of a class generating an
event to another instance of a class (not necessarily distinct).
As events are dispatched, transitions occur, the state actions are executed
and other may events be generated.
At some point the tree stops growing (assuming the computation is bounded)
and the all of the transitions and their corresponding actions will execute.
At this time the thread of control is considered completed.
The underlying state machine execution engine in [package raloo]
insures that only one thread of control executes at any time.
Any new thread of control that is starting as part of the execution of the
current thread of control is deferred until the current thread terminates.

[para]
The [package raloo] state machine execution engine uses the Tcl event
loop in order to sequence threads of control.
This implies that when a Domain is used in an application and the domain
contains asynchronous processing, the Tcl event loop must be entered
in order for the thread of control execution to take place.
This is the natural order of things when Tk is used as part of the
application.
However, for ordinary Tcl script based application, it implies the the
[cmd vwait] command must be executed and the use of a Domain that does
asynchronous processing in an application will demand that the application
be event driven in its entirity.

[see_also TclRAL tuple relation]

[keywords object-oriented relation variable]

[manpage_end]
