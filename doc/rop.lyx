#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass linuxdoc
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\papersize Default
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Title
\added_space_top vfill \added_space_bottom vfill 
A Brief Introduction to Relation Oriented Programming
\layout Author

Andrew Mangogna 
\layout Date

29 August 2004
\layout Abstract

This paper introduces some of the concepts of the Relational Model of Data
 and shows how those concepts are reflected in the Tcl Relational Algebra
 Library.
 Examples are given to demonstrate a programming style that is oriented
 to using TclRAL to solve problems where the data has been modeled in a
 relational fashion.
\layout Standard


\begin_inset LatexCommand \tableofcontents{}

\end_inset 


\layout Section

What is the Relational Model of Data?
\layout Standard

The Relational Model is the application of set theory and predicate logic
 to data management.
\begin_inset Foot
collapsed true

\layout Standard

Put in reference here
\end_inset 

 It was originally formulated by E.F.
 Codd in 1969-1970.
\begin_inset Foot
collapsed true

\layout Standard

E.F.
 Codd, 
\emph on 
A Relational Model of Data for Large Shared Data Banks
\emph default 
, CACM 13, No.
 6, June 1970.
\end_inset 

 Date gives five components of the relational model\SpecialChar \@.

\begin_inset Foot
collapsed true

\layout Standard

C.J.
 Date, 
\emph on 
An Introduction to Database Systems
\emph default 
, 8th Edition, Addison-Wesley, 2004, ISBN 0-321-19784-4, p 64.
\end_inset 


\layout Enumerate

An open-ended collection of scalar types.
\layout Enumerate

A relation type generator.
\layout Enumerate

Relation variables.
\layout Enumerate

A Relational assignment operation.
\layout Enumerate

An open-ended collection of relational operators.
\layout Standard

The relational model is concerned about three aspects of data:
\layout Enumerate

Data structure.
\layout Enumerate

Data integrity.
\layout Enumerate

Data manipulation.
\layout Standard

Although, the relational model is usually discussed in the context of Relational
 Database Management Systems (RDMS), in truth it is a very general and formal
 means of describing data that operates at a logical level independent of
 any particular database.
 In this paper we will discuss the relational model in terms of a set of
 formalizism to describe a problem domain and then give some examples on
 how implementations may be formulated in the relational algebra.
 Specifically we will present the examples in TclRAL.
\layout Section

What is a Tuple?
\layout Standard

To start understanding the components of the relational model some preliminaries
 are necessary.
 Tuples are the basic components of a relation so we will start there.
 A 
\series bold 
tuple value
\series default 
 is a set of tuple components.
 Each tuple component consists of an
\series bold 
 attribute
\series default 
 
\series bold 
name
\series default 
, a 
\series bold 
data type
\series default 
 and a 
\series bold 
value
\series default 
.
 Within a given tuple all attribute names must be unique.
 Each attribute has a data type, 
\emph on 
e.g.

\emph default 
 int, and the value of the attribute must match the data type of the attribute.
 There are a few very important properties of tuples that need to be mentioned.
\layout Enumerate

Every tuple contains exactly one value (of the appropriate type) for each
 attribute.
 There is no concept of a NULL value, although the empty string is a valid
 value for an attribute of type string.
\layout Enumerate

There is no left-to-right ordering of attributes in tuples despite the fact
 that a definite left to right ordering is necessary when the tuple is represent
ed in text.
 Tuples are mathematical sets and thus have no implied ordering.
\layout Enumerate

Every subset of attributes of a tuple is also a tuple.
 This includes also the tuple that contains no attributes.
\layout Subsection

TclRAL Syntax
\layout Standard

In the Tcl Relational Algebra Library (TclRAL), a tuple can be represented
 as a string just like any other Tcl entity.
 For tuples, the string representation is that of a three element list.
 The three elements are:
\layout Enumerate

The keyword 
\noun on 
Tuple
\noun default 
.
\layout Enumerate

A list of attribute name / data type pairs.
\layout Enumerate

A list of attribute name / attribute value pairs.
\layout Standard

So for example, the statement,
\layout Verbatim

set t {Tuple {{Name string} {Breed string} {Age int}} {Name Fido Breed Terrier
 Age 2}}
\layout Standard

sets the variable 
\family typewriter 
t
\family default 
 to a string that is a list of three elements that are formatted in such
 a manner that it can be used as a tuple in the proper context.
 The data type names must be valid Tcl data types as used internally.
 Tcl has many data types, but the most useful in this context are probable
 the simple ones, such as string, int, double and list.
 It is possible to have a Tuple valued attribute.
 Also, since the ordering of attribute names is not significant when specifying
 the attribute values, the above tuple could also have been written as:
\layout Verbatim

set t {Tuple {{Name string} {Breed string} {Age int}} {Age 2 Name Fido Breed
 Terrier}}
\layout Standard

This property leads to the natural conclusion that the string representation
 of a tuple is not unique.
 There are many different strings that will result in the same tuple.
 This is really no different than the case with integers since 
\begin_inset Quotes eld
\end_inset 

0x10
\begin_inset Quotes erd
\end_inset 

 and 
\begin_inset Quotes eld
\end_inset 

16
\begin_inset Quotes erd
\end_inset 

 will result in the same integer value.
 The point here is that although tuples may be represented as strings, they
 should not be operated on with string operators.
 Indeed there is an entire set of operators suppied by TclRAL for the purpose
 of manipulating tuple values.
\layout Section

What is a Relation?
\layout Standard

Roughly speaking, a relation is a set of tuples that all have the same heading.
 Because a relation is a set, there are no duplicated tuples.
 Some of the implications of this are:
\layout Enumerate

Like tuples there is no inherent left to right ordering.
 Clearly an implementation may choose to store values in some definite order.
 However, the relation operators do not depend upon any such ordering.
\layout Enumerate

There is no inherent top to bottom ordering.
 Again an implementation may store tuples in some definite order, but that
 order is not part of what the operators expose.
\layout Subsection

Relations as Predicates
\layout Standard

More important is that a relation can represent a statement of truth about
 some subject.
 That is some of the power that relations bring to modeling software.
 In the next sections we will show how relations can be used to formalize
 the facts about some subject matter.
\layout Section

A Dog of an Example
\layout Standard

Examples can be difficult.
 To make them small enough not to consume an entire book risks making them
 trivial.
 In a tutorial such as this it is convenient to choose a subject matter
 that does not require an extensive background from the reader.
 So we have chosen to examine the problem of managing a dog show.
\layout Standard

First, let me say that I do not know anything about how dog shows are managed
 in the real world.
 I don't even own a dog.
 The only dog show I have ever seen has been on television.
 So any reader that does have detailed application knownledge about how
 to run a dog show is likely to find that this example has little similarity
 to reality.
 However, that does not diminish its pedagogical benefit.
 It just means that you are unlikely to try to turn this examine into a
 commercial software product (not that you would have been tempted of that
 anyway).
\layout Subsection

The Cosmos Dog Show
\layout Standard

At the Cosmos Dog Show, we are interesting in keeping track of some simple
 statistics about the dogs that are entered into the show, the contests
 that are held and the results of the judging.
 Let's start with a few basic facts:
\layout Enumerate

We want to keep track of the dogs.
 Dogs are categorized by breed and breeds are grouped according to their
 general nature.
 Generally toy poodles are in a different breed category than large working
 dogs such as Irish hounds.
\layout Enumerate

We want to keep track of the dog owners and dog handlers.
 During a dog show, the dog is often handled by someone other than the owner.
 We also want to allow for multiple people to own the same dog.
\layout Enumerate

We want to keep track of judges.
\layout Enumerate

We want to keep track of what the contests in the dog show are and what
 the results are.
\layout Enumerate

We specifically decide not to keep track of the pedigree of a dog.
 A pedigree can be long and complicated and might be interesting, but we
 have to draw the line somewhere.
\layout Standard

So the design strategy is to represent the facts of the dog show as a set
 of relations and then show how we may operate on those relations to obtain
 the information we need to manage the dog show.
\the_end
