[manpage_begin tuple n 0.8]
[moddesc "Operators for the Tuple data type"]
[titledesc "Tuple Operators"]
[copyright "2004 by G. Andrew Mangogna"]
[require ral 0.8]
[description]
This manpage describes the
[cmd tuple]
command.
The
[cmd tuple]
command is part of the Tcl Relational Algebra Library (ral) package.
The ral package introduces an new Tcl data type called
[emph Tuple]
and this command provides the operators for the Tuple data type.
[section OVERVIEW]
[section {STRING REPRESENTATION}]
Like any Tcl value, tuples have a string representation.
The string representation of a tuple is a specially formatted list
consisting of three elements:
[list_begin enum]
[enum] The keyword [emph Tuple].
[enum] The tuple heading.
[enum] The tuple values.
[list_end]
The tuple heading is itself a list whose elements give the attribute names
and attribute data types of the tuple.
Each heading element consists of further sub-elements.
If the heading element list consists of two sub-elements then they are
the attribute name and attribute data type respectively. If only one
sub-element is present, then it is take as the attribute name and the
attribute data type is set to [emph string].
Data types may be any valid Tcl object type.
Although Tcl uses many different types internally,
the most useful types are int, double, boolean, list, Tuple and Relation.
[para]
The tuple values are also specified by a list consisting of an even
number of elements.
This list is of the same form as that accepted by the [cmd "array set"]
command.
The even indexed elements are attribute names and the odd index elements
give the corresponding attribute value.
[para]
The following is a literal string representation of a tuple with
three attributes.
[example_begin]
{Tuple {{Name string} {Breed string} {Age int}} {Name Fido Breed Terrier Age 2}}
[example_end]
By taking advantage of the fact that strings are very common and have a
special place in Tcl, the above example could also be written as:
[example_begin]
{Tuple {Name Breed {Age int}} {Name Fido Breed Terrier Age 2}}
[example_end]
[para]
These examples demonstrate the fact that the string representation of
a tuple is [emph not] unique.

[section COMMANDS]
[list_begin definitions]
[call [cmd "::ral::tuple assign"] [arg tupleValue]]

The [cmd assign] subcommand provides a convenient way to place the values
of the attributes of a tuple into Tcl variables.
The [cmd assign] subcommand places the value of each attribute
of a tuple into Tcl variables that have the same name as the
attribute names of the tuple.
Any existing variable that has the same name as an attribute is assigned a
new value.
Variables are created as necessary.
All variables are created in the local scope.
The [cmd assign] subcommand returns the empty string.

[call [cmd "::ral::tuple create"] [arg heading] [arg name-value-list]]

The [cmd create] subcommand creates a new tuple that has a heading
given by the [arg heading] argument and values given by the
[arg name-value-list] argument and returns the value of the new tuple.
The [arg heading] is specified by a list each element of which may
contain one or two subelements. If an element of the [arg heading] contains
two subelements then the values of the subelement are taken as the
attribute name and attribute data type.
If only one subelement is given, then it is taken to be the attribute
name and the attribute data type is taken to be [emph string].
The [arg name-value-list] must have an even number of elements and the
elements are treated as pairs.
The first element of a pair is taken to be an attribute name and the second is
taken as the corresponding value for the attribute.
This is the same form of list accepted by the [cmd "array set"] command.

When a tuple is created each value is converted to the underlying data
type specified in the heading of the tuple.
It is an error if conversion fails.
It is also an error not to supply a value for every attribute or to attempt
to supply the value of any attribute more than once.

[call [cmd "::ral::tuple degree"] [arg tupleValue]]

The [cmd degree] subcommand returns the degree of the tuple which is
the number of attributes the tuple has.

[call [cmd "::ral::tuple equal"] [arg tuple1] [arg tuple2]]

The [cmd equal] subcommands returns "1" if [arg tuple1] is equal to
[arg tuple2] and "0" otherwise.
Two tuples are equal if they the same attribute names,
the corresponding attributes have the same type and
the corresponding attribute values are equal.
Because there is no inherent order to the attributes of a tuple,
there are many ways to specify the same tuple.
For example, the following tuples are equal.
[example_begin]
set t1 [lb]::ral::tuple create {{Name string} {Status int}} {Name Fred Status 20}[rb]
set t2 [lb]::ral::tuple create {{Status int} {Name string}} {Name Fred Status 20}[rb]
[example_end]
This implies that only [cmd "tuple equal"] can reliably determine
tuple equality.
Using [cmd "string equal"] to determine tuple equality is not reliable and
should be avoided.

[call [cmd "::ral::tuple eliminate"] [arg tupleValue] [opt [arg "attr ..."]]]

The [cmd eliminate] subcommand returns a new tuple with the same
heading and values as [arg tupleValue] except that those attributes given
in the argument list are not present.
It is an error to attempt to eliminate attributes that are not part of
[arg tupleValue].

[call [cmd "::ral::tuple extend"] [arg tupleValue] [opt [arg "name-type-value ..."]]]

The [cmd extend] subcommand returns a new tuple with the same heading and
values as [arg tupleValue] expect that the new attributes given by
[arg name-type-value] are included.
The [arg name-type-value] arguments are each a list consisting of two or
three elements. If [arg name-type-value] list contains three elements then
they are taken as a new attribute name, attribute data type and attribute
value in that order. If only two elements are given, then they are
taken as the attribute name and attribute value and the attribute data
type is taken as "string".
It is an error to attempt to [cmd extend] a tuple with an attribute name
that is already contained in [arg tupleValue].
Each new attribute value is converted to the appropriate type and it is
an error if that conversion fails.

[call [cmd "::ral::tuple extract"] [arg tupleValue] [arg attr] [opt [arg "attr2 ..."]]]

The [cmd extract] subcommand returns the value of one or more attributes.
If only a single [arg attr] is requested, then the attribute value
is the return value of the command.
If multiple [arg attr] are requested, then a list of attribute values
is returned.
The order of the returned list is the same as the order of the [arg attr]
arguments.

[call [cmd "::ral::tuple get"] [arg tupleValue]]

The [cmd get] subcommand returns a list consisting of pairs of elements.
The first element of each pair is an attribute name and the second
is the attribute value.
The form of the list is the same as that returned by [cmd "array get"]
and accepted by [cmd "array set"].
The [cmd get] subcommand provides a convenient means to move tuple
values into an array.

[call [cmd "::ral::tuple project"] [arg tupleValue] [opt [arg "attr ..."]]]

The [cmd project] subcommand returns a new tuple that consists of the
attributes given the arguments and the corresponding values are taken from
[arg tupleValue].

[call [cmd "::ral::tuple rename"] [arg tupleValue] [opt [arg "oldname newname ..."]]]

The [cmd rename] subcommand returns a new tuple where [arg oldname] is
replaced by [arg newname].
Many pairs of [arg oldname]/[arg newname] may be given.
It is an error to attempt to given an [arg oldname] that is not an attribute
name in the tuple or to attempt to change the name of an attribute to be
one that already exists in the tuple.

[call [cmd "::ral::tuple typeof"] [arg tupleValue]]

The [cmd typeof] subcommand returns the type of the given [arg tupleValue].
The type of a tuple is a list consisting of the first two elements
of the string representation of a tuple, as described above.

[call [cmd "::ral::tuple unwrap"] [arg tupleValue] [arg attr]]
[call [cmd "::ral::tuple update"] [arg tupleVarName] [arg name-value-list]]
[call [cmd "::ral::tuple wrap"] [arg tupleValue] [arg newAttr] [arg oldAttrList]]
[list_end]
[manpage_end]
