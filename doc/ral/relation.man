[manpage_begin relation n 0.8]
[comment {
# This software is copyrighted 2004, 2005, 2006 by G. Andrew Mangogna.
# The following terms apply to all files associated with the software unless
# explicitly disclaimed in individual files.
# 
# The authors hereby grant permission to use, copy, modify, distribute,
# and license this software and its documentation for any purpose, provided
# that existing copyright notices are retained in all copies and that this
# notice is included verbatim in any distributions. No written agreement,
# license, or royalty fee is required for any of the authorized uses.
# Modifications to this software may be copyrighted by their authors and
# need not follow the licensing terms described here, provided that the
# new terms are clearly indicated on the first page of each file where
# they apply.
# 
# IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY FOR
# DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING
# OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY DERIVATIVES
# THEREOF, EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT.  THIS SOFTWARE
# IS PROVIDED ON AN "AS IS" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE
# NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS,
# OR MODIFICATIONS.
# 
# GOVERNMENT USE: If you are acquiring this software on behalf of the
# U.S. government, the Government shall have only "Restricted Rights"
# in the software and related documentation as defined in the Federal
# Acquisition Regulations (FARs) in Clause 52.227.19 (c) (2).  If you
# are acquiring the software on behalf of the Department of Defense,
# the software shall be classified as "Commercial Computer Software"
# and the Government shall have only "Restricted Rights" as defined in
# Clause 252.227-7013 (c) (1) of DFARs.  Notwithstanding the foregoing,
# the authors grant the U.S. Government and others acting in its behalf
# permission to use and distribute the software in accordance with the
# terms specified in this license.
# 
#  *++
# MODULE:
# 
# ABSTRACT:
# 
# $RCSfile: relation.man,v $
# $Revision: 1.2 $
# $Date: 2006/04/27 14:48:56 $
#  *--
}]
[moddesc "Relation Operators"]
[titledesc "Operators for Relation Values"]
[copyright "2004, 2005, 2006 by G. Andrew Mangogna"]
[require ral 0.8]
[description]
This manpage describes the [cmd relation] command.
The [cmd relation]
command is part of the Tcl Relational Algebra Library (ral) package.
The [cmd relation] command defines a set of operators on relations that
constitute the formal algebra of relations that is supported by TclRAL.
The algebra is patterned after that described by Date (Date, C.J.,
[emph "An Introduction to Database Systems"], 8th ed, Pearson Education, 2004,
ISBN 0-321-19784-4, chap. 7)

[para]
Formally a relation has a heading and a body.
The heading, like a tuple heading, defines the attribute names and
data types of the components of the relation.
The body consists of tuples, all of which match the heading.
A relation also has one or more identifiers (also known as candidate keys).
Each identifier consists of one or more attributes of the relation and
every tuple in the body of the relation will be unique in all their values
with respect to all the identifiers.
Because relations are fundamentally sets, several things should be noted:
[list_begin enum]
[enum]
There is no left to right ordering of the attributes.
Like tuples, relations have no real left to right ordering.
The implementation may choose to store attributes in any order
and users should not depend upon certain string representations
nor operate on relations with any operators other than those given here.
[enum]
There is no top to bottom ordering of tuples.
Again the implementation is free to store tuples in any order it chooses.
There are no indexing operations that depend upon a tuple at some fixed
location.
[enum]
There are no duplicate tuples and there is no concept of a NULL value.
Relations are sets and sets do not have duplicates.
All attributes of all tuples of a relation must contain a valid value of
the data type defined for that attribute.
[list_end]

[para]
Note that all the operators are [emph "read only"] in the sense that
they operate on relation values without modifying them.
All of these operators return either a new relation or scalar value and
do not modify the relation arguments.
Only the [cmd relvar] command can modify a relation variable in place.

[section "STRING REPRESENTATION"]
Like any Tcl value, relations have a string representation.
The string representation of a relations is a specially formatted list
consisting of four elements:
[list_begin enum]
[enum]
The keyword [emph Relation].
[enum]
The relation heading.
[enum]
The identifiers of the relation.
[enum]
The relation body.
[list_end]
The relation heading is a even numbered list consisting of alternating
attribute names and attribute data types.
It is the same form as a tuple heading.
[para]
The identifiers (candidate keys) of a relation are specified as a list.
Each identifer list element is in turn a list containing the attribute
names that constitute the identifier.
Every relation must have at least one identifier.
[para]
The body of a relation consists of a list of tuples.
Each tuple in the body is in a list containing an even number of elements
consisting alternately of an
attribute name and an attribute value.
[para]
The following is a literal string representation of a relation with
one tuple in its body.
[example_begin]
{Relation {DogName string Breed string} DogName {{DogName Fido Breed Poodle}}}
[example_end]

[section EXAMPLE]
In the command descriptions that follow,
we will often refer to the example data given below.
We assume that the relation is contained in a Tcl variable with the
same name as the tables given below.
For brevity we assume that the necessary commands have been imported into
the namespace of the example.

[example_begin]
% set DOG {
    Relation
    {DogName string Breed string}
    DogName
    {
	{Fido Poodle}
	{Sam Collie}
	{Spot Terrier}
	{Rover Retriever}
	{Fred Spaniel}
	{Jumper Mutt}
    }
}
% relformat $DOG DOG
DOG
DogName      Breed
 string     string
==================
   Fido     Poodle
    Sam     Collie
   Spot    Terrier
  Rover  Retriever
   Fred    Spaniel
 Jumper       Mutt
% set OWNER {
    Relation
    {OwnerName string Age int City string}
    OwnerName
    {
	{OwnerName Sue Age 24 City Cupertino}
	{OwnerName George Age 35 City Sunnyvale}
	{OwnerName Alice Age 30 City {San Jose}}
	{OwnerName Mike Age 50 City {San Jose}}
	{OwnerName Jim Age 42 City {San Francisco}}
    }
}
% relformat $OWNER OWNER
OWNER
OwnerName  Age           City
   string  int         string
=============================
      Sue   24      Cupertino
   George   35      Sunnyvale
    Alice   30       San Jose
     Mike   50       San Jose
      Jim   42  San Francisco
% set OWNERSHIP {
    Relation
    {OwnerName string DogName string Acquired string}
    {{OwnerName DogName}}
    {
	{OwnerName Sue DogName Fido Acquired 2001}
	{OwnerName Sue DogName Sam Acquired 2000}
	{OwnerName George DogName Fido Acquired 2001}
	{OwnerName George DogName Sam Acquired 2000}
	{OwnerName Alice DogName Spot Acquired 2001}
	{OwnerName Mike DogName Rover Acquired 2002}
	{OwnerName Jim DogName Fred Acquired 2003}
    }
}
% relformat $OWNERSHIP OWNERSHIP
OWNERSHIP
OwnerName  DogName  Acquired
   string   string    string
============================
      Sue     Fido      2001
      Sue      Sam      2000
   George     Fido      2001
   George      Sam      2000
    Alice     Spot      2001
     Mike    Rover      2002
      Jim     Fred      2003
[example_end]

[section COMMANDS]
[list_begin definitions]

[call [cmd "::ral::relation array"] [arg relationValue] [arg arrayVarName]]

The [cmd array] subcommand converts the relation value
given by [arg relationValue] into an array variable named [arg arrayVarName].
The [arg relationValue] must be a binary relation with a single identifier
that has a single attribute.
The array variable will be created if necessary.
The values of the identifying attribute of [arg relationValue] will become
the array indices of [arg arrayVarName]
the other attribute values will be set to the corresponding array values.

[example {
% relation array $DOG dogarray
% parray dogarray
dogarray(Fido)   = Poodle
dogarray(Fred)   = Spaniel
dogarray(Jumper) = Mutt
dogarray(Rover)  = Retriever
dogarray(Sam)    = Collie
dogarray(Spot)   = Terrier
}]

[call [cmd "::ral::relation cardinality"] [arg relationValue]]

The [cmd cardinality] subcommand returns the number tuples contained
in the body of [arg relationValue].

[example {
% relation cardinality $DOG
6
% relation cardinality $OWNERSHIP
7
}]

[call [cmd "::ral::relation choose"] [arg relationValue]\
    [arg attr] [arg value] [opt "attr2 value2 ..."]]

The [cmd choose] subcommand returns a new relation
that has the same heading as [arg relationValue] and a body consisting
of the set of tuples in [arg relationValue] whose identifying attribute values
match those given as the [arg attr] [arg value] arguments.
The cardinality of the returned relation will necessarily then be either 0 or 1.
The [arg attr] [arg value] arguments must come in pairs
where attribute names alternate with attribute values.
The set of attribute names given must form one of the
identifiers of [arg relationValue].
If [arg relationValue] contains a tuple whose attribute values match those
given then the returned relation will contain that single tuple.
Otherwise the returned relation has cardinality 0.
This subcommand is useful in those contexts where the attribute values of an
identifier are known and evaluating an expression over all the tuples
in [arg relationValue] is superfluous.

[example {
% relformat [relation choose DOG DogName Fred]
DogName    Breed
 string   string
================
   Fred  Spaniel

% relformat [relation choose $DOG DogName Jane]
DogName    Breed
 string   string
================
}]

[call [cmd "::ral::relation degree"] [arg relationValue]]

The [cmd degree] subcommand returns the number of attributes in the
heading of [arg relationValue]

[example {
% relation degree $DOG
2
}]

[call [cmd "::ral::relation dict"] [arg relationValue]]

The [cmd dict] subcommand returns a dictionary object for an appropriately
structured [arg relationValue].
The [arg relationValue] must be a binary relation with a single identifier
that has a single attribute.
The returned dictionary will have the values of the identifying attribute
as the dictionary keys and the other attribute values
as the corresponding dictionary values.

[example {
% dict for {name breed} [relation dict $DOG] {
     puts "$name ==> $breed"
}
Fred ==> Spaniel
Sam ==> Collie
Rover ==> Retriever
Spot ==> Terrier
Fido ==> Poodle
Jumper ==> Mutt}]

[call [cmd "::ral::relation divide"] [arg dividend] [arg divisor]\
    [arg mediator]]

The [cmd divide] subcommand implements the relational divide operation.
The headings of [arg dividend] and [arg divisor] must be disjoint and
the heading of [arg mediator] must be the union of the [arg dividend]
and [arg divisor] headings.
The returned result is a new relation that has the same heading as
[arg dividend] and contains all the tuples from [arg dividend] whose
corresponding tuples in [arg mediator] include all the tuples in
[arg divisor].
Using the data from our ongoing example, then the following example shows
how division can be used to find all the Dogs owned by both Sue and George.


[example {
set dividend [relation project $DOG DogName]
puts [relformat $dividend Dividend:]
Dividend:
---------
DogName
 string
=======
   Fido
    Sam
   Spot
  Rover
   Fred
 Jumper

set divisor [relation project [relation restrict $OWNER t\ 
    {[tuple extract $t OwnerName] eq "Sue" ||\ 
    [tuple extract $t OwnerName] eq "George"}] OwnerName]
puts [relformat $divisor Divisor:]
Divisor:
--------
OwnerName
   string
=========
      Sue
   George

set mediator [relation eliminate $OWNERSHIP Acquired]
puts [relformat $mediator Mediator:]
Mediator:
---------
OwnerName  DogName
   string   string
==================
      Sue     Fido
      Sue      Sam
   George     Fido
   George      Sam
    Alice     Spot
     Mike    Rover
      Jim     Fred

set quotient [relation divide $dividend $divisor $mediator]
puts [relformat $quotient "All dogs owned by both Sue and George"]
All dogs owned by both Sue and George
-------------------------------------
DogName
 string
=======
   Fido
    Sam

}]

[call [cmd "::ral::relation eliminate"] [arg relationValue]\
    [opt "attribute ..."]]

The [cmd eliminate] subcommand returns a new relation that has a heading
equal to that of the [arg relationValue] less any attributes whose names
are given in the [arg attribute] arguments.
The body of the new relation is the same as the body of [arg relationValue]
removing any tuples that might be duplicated as a result of removing the
attributes.
The [cmd eliminate] subcommand complements the [cmd project] command
in the sense that [cmd eliminate] specifies which attributes
to discard and [cmd project] specifies which attribute to keep.

[example {
% relformat [relation eliminate $DOG Breed]
DogName
 string
=======
   Fido
    Sam
   Spot
  Rover
   Fred
 Jumper
}]

[call [cmd "::ral::relation emptyof"] [arg relationValue]]
The [cmd emptyof] subcommand returns a new relation that has the same
heading as [arg relationValue] but whose cardinality is zero.

[call [cmd "::ral::relation extend"] [arg relationValue]\
    [opt "-ascending | -descending attrNameList"] [arg tupleVariable]\
    [opt "attr1 type1 expr1 attr2 type2 expr2 ..."]]

The [cmd extend] subcommand returns a new relation which has the same
heading as [arg relationValue] with zero or more additional attributes.
The first additional attribute is given by [arg attr1] which has
type [arg type1] and its value is
set to the result returned by passing [arg expr1] to the [cmd expr] command.
Subsequent attributes are treated similarly.
As each tuple in the body of [arg relationValue] is considered, its
value is set into the variable whose name is given by the [arg tupleVariable]
argument.
This variable is accessible to the extending expressions so that the
current tuple values of [arg relationValue] are available for computing
the values of the new attributes.
Optionally, the order in which the tuples are considered can be specified
by giving the a list of attribute names with the [opt -ascending] or
[opt -descending] argument.
If the order is specified, then the new relation is created by extending
[arg relationValue] considering each tuple in the order to which they sort.
If no ordering is given, then the tuples are extended by considering them
in an indeterminate order.

[example {
% relformat [relation extend $OWNER o\ 
    AgeInMonths int {[tuple extract $o Age] * 12}]
OwnerName  Age           City  AgeInMonths
   string  int         string          int
==========================================
      Sue   24      Cupertino          288
   George   35      Sunnyvale          420
    Alice   30       San Jose          360
     Mike   50       San Jose          600
      Jim   42  San Francisco          504
}]

[call [cmd "::ral::relation foreach"] [arg tupleVariable] [arg relationValue]\
    [opt "-ascending | -descending"] [opt attr-list] [arg script]]

The [cmd foreach] subcommand provides a means to iterate through the
body of a relation.
For each tuple in the body of [arg relationValue],
the [arg tupleVariable] variable is assigned a value of a tuple and
[arg script] is executed.
The order in which the tuples are considered is unspecified unless
the list of sorting attributes is specified.
In this case the tuples are visited in the [arg -ascending] order of
the values of the sorting attibutes if the direction option
of [arg -ascending] is supplied or if no direction option is given.
Tuples can be visited in descending order of the sorting attributes if
the [arg -descending] option is given.

[example {
% relation foreach d $DOG descending DogName {
    puts [tuple extract $d DogName]
}
Spot
Sam
Rover
Jumper
Fred
Fido
}]

[call [cmd "::ral::relation group"] [arg relationValue] [arg newattribute]\
    [opt "attr1 attr2 ..."]]

The [cmd group] subcommand creates a new relation from [arg relationValue]
that contains an attribute which is of type [emph Relation].
The [arg newattribute] argument gives the name of the relation valued
attribute and
the [arg attrN] arguments give the names of attributes in
[arg relationValue] that are to be assembled into a relation value.
The returned relation has a heading that is the same as [arg relationValue]
minus the attributes given in the [arg attrN] arguments plus the
new relation attribute given by [arg newattribute].
The resulting body has tuples for each unique set of values for the
remaining ungrouped attributes in the original relation with the
corresponding part of the tuple placed in the new relation valued attribute.
See also the [cmd ungroup] subcommand for the complementary operation.

[example {
relation group $OWNERSHIP DogAcquisition Dogname Acquired
OwnerName     DogAcquisition
   string           Relation
           DogName  Acquired
            string    string
============================
      Sue     Fido      2001
               Sam      2000
   George     Fido      2001
               Sam      2000
    Alice     Spot      2001
     Mike    Rover      2002
      Jim     Fred      2003
}]

[call [cmd "::ral::relation heading"] [arg relationValue]]

The [cmd heading] subcommand returns the relation heading of the
[arg relationValue].
The heading is a three element list consisting of the keyword
[emph Relation], a list of attributes and types and a list of identifiers.

[example {
% relation heading $DOG
Relation {DogName string Breed string} DogName
}]

[call [cmd "::ral::relation identifiers"] [arg relationValue]]

The [cmd identifiers] subcommand returns the set of identifiers for the
relation.
The identifiers are returned as a list each element of which is in turn
a list of attribute names that constitute the identifer.

[call [cmd "::ral::relation intersect"] [arg relationValue1]\
    [arg relationValue2] [opt "relationValue3 ..."]]

The [cmd intersect] subcommand returns the set intersection of two or
more relations.
All relations must be of the same type.
The result relation has a heading that is the same as any of the arguments
and has a body consisting of all tuples present in all of the
[arg relationValue] arguments.
Since the intersection operation is both associative and commutative,
the order of the [arg relationValue] arguments has no effect the result.

[call [cmd "::ral::relation is"] [arg relationValue1] [arg compareop]\
    [arg relationValue2]]

The [cmd is] subcommand returns a boolean value based on performing a
comparison operation between two relation values.
Allowed values of [arg compareop] are:
[list_begin definitions]
[lst_item [cmd "equal | =="]]
Returns 1 if [arg relationValue1] is equal to [arg relationValue2].

[lst_item [cmd "notequal | !="]]
Returns 1 if [arg relationValue1] is not equal to [arg relationValue2].

[lst_item [cmd "propersubsetof | <"]]
Returns 1 if [arg relationValue1] is a proper subset of [arg relationValue2].

[lst_item [cmd "subsetof | <="]]
Returns 1 if [arg relationValue1] is a subset of [arg relationValue2].

[lst_item [cmd "propersupersetof | >"]]
Returns 1 if [arg relationValue1] is a proper superset of [arg relationValue2].

[lst_item [cmd "supersetof | >="]]
Returns 1 if [arg relationValue1] is a superset of [arg relationValue2].

[list_end]

Both [arg relationValue1] and [arg relationValue2] must be of the same
type to be compared.

[call [cmd "::ral::relation isempty"] [arg relationValue]]

The [cmd isempty] subcommand returns the boolean value "1" if the
body of [arg relationValue] does not contain any tuples and "0" otherwise.
The [cmd isempty] subcommand is a convenient short hand for the the command
[cmd "expr \{\[::ral::relation cardinality [arg relationValue]] == 0\}"].

[call [cmd "::ral::relation isnotempty"] [arg relationValue]]

The [cmd isnotempty] subcommand returns the boolean value "1" if the
body of [arg relationValue] contains any tuples and "0" otherwise.
The [cmd isnotempty] subcommand is a convenient short hand for the the command
[cmd "expr \{\[::ral::relation cardinality [arg relationValue]] != 0\}"].

[call [cmd "::ral::relation join"] [arg relationValue1] [arg relationValue2]\
    [opt "-using attrList"] [opt "relationValue3 ..."] [opt "-using attrList2"]]

The [cmd join] subcommand performs the [emph natural] join of
[arg relationValue1] with [arg relationValue2].
The join is performed across the given [arg attrList].
If no [arg attrList] are given, then the join is performed across
attributes with the same name in both relations
(because of the [cmd rename] subcommand it is always possible to arrange
for the relations to have common names for the join attributes).
If present, the [arg attrList] is a list of pairs of attribute names.
The even numbered elements
give the name of a join attribute in [arg relationValue1] and the
odd numbered elements give the name of the corresponding
join attribute in [arg relationValue2].
The heading of the resulting relation consists of all the attibutes of
[arg relationValue1] plus all the attributes of [arg relationValue2]
minus any of the join attributes from [arg relationValue2].
The body of the resulting relation consists all tuples composed from the
tuples in both [arg relationValue1] and [arg relationValue2] where the values of
the join attributes in [arg relationValue1] equal those of [arg relationValue2].
Several relations can be joined by optionally listing them as additional
[arg relationValueN] arguments.
Additional [opt -using] arguments may be given for each pair of
[arg relationValue] arguments to specify the attributes across which the
join is to be performed.
The [opt -using] options are a convenient short hand for having to
[cmd rename] attributes to achieve common attribute names.
The join operation is both associative and commutative and so the order
of the [arg relationValueN] does not affect the result.

[example {
% relformat [relation join $OWNERSHIP $DOG]
OwnerName  DogName  Acquired      Breed
   string   string    string     string
=======================================
      Sue     Fido      2001     Poodle
      Sue      Sam      2000     Collie
   George     Fido      2001     Poodle
   George      Sam      2000     Collie
    Alice     Spot      2001    Terrier
     Mike    Rover      2002  Retriever
      Jim     Fred      2003    Spaniel
}]

[call [cmd "::ral::relation list"] [arg relationValue]]

The [cmd list] subcommand returns the body of [arg relationValue] as
a proper Tcl list.
[arg RelationValue] must be of degree one or an error is returned.
The [cmd list] subcommand is complementary to the [cmd tuple] subcommand
in the sense that it provides proper Tcl list for a relation of degree one where
the [cmd tuple] subcommand provides a single tuple for a relation of
cardinality one.
Note also that the list returned by the [cmd list] subcommand is a
proper set since there are no duplicates in a relation.

[example {
% relation list [relation project $OWNERSHIP Acquired]]
2001 2000 2002 2003
}]

[call [cmd "::ral::relation minus"] [arg relationValue1] [arg relationValue2]]

The [cmd minus] subcommand returns the set difference between two relations.
The [arg relationValue] arguments must be of the same type and that is the
type of the result relation.
The body of the result consists of those tuples present in
[arg relationValue1] but not present in [arg relationValue2].
Note that the order of the [arg relationValue1] and [arg relationValue2]
arguments is significant to the result,
[emph i.e.] [cmd minus] is [emph not] a commutative operation.

[call [cmd "::ral::relation project"] [arg relationValue]\
    [opt "attr1 attr2 ..."]]

The [cmd project] subcommand returns a relation whose heading consists of
only those attributes listed in the [arg attrN] arguments.
The body of the result consists of tuples the corresponding tuples from
[arg relationValue], removing any duplicates created by considering only
a subset of the attributes.

[example {
% relformat [relation project $OWNER City]
         City
       string
=============
    Cupertino
    Sunnyvale
     San Jose
San Francisco
}]

[call [cmd "::ral::relation rename"] [arg relationValue]\
    [opt "oldname newname ..."]]

The [cmd rename] subcommand returns a relation whose heading has each
[arg oldname] attribute changed to [arg newname] and whose body is the
same as [arg relationValue].
An arbitrary number of [arg "oldname / newname"] pairs may be given.
Renaming is processed from left to right in the command arguments
and it is not an error to change the name of any given attribute multiple times.
However, [arg oldname] must always be the name of an attribute at the
time the rename takes place.
The [cmd rename] subcommand is useful for manipulating the attribute names
of a relation to suit the needs of particular operators ([emph e.g.]
[cmd times] and [cmd join]).

[call [cmd "::ral::relation restrict"] [arg relationValue] [arg tupleVariable]\
    [arg expression]]

The [cmd restrict] subcommand returns a new relation that is a
subset (possibly improper) of [arg relationValue].
Each tuple in the body of [arg relationValue] is successively assigned
to [arg tupleVariable] and [arg expression] is evaluated.
The resulting relation has a heading that is the same as [arg relationValue]
and a body consisting of all tuples where [arg expression] evaluated to true.

[example {
% relformat [relation restrict $DOG d {[tuple extract $d DogName] eq "Fred"}]
DogName    Breed
 string   string
================
   Fred  Spaniel
}]

[call [cmd "::ral::relation restrictwith"] [arg relationValue]\
    [arg expression]]

The [cmd restrictwith] subcommand behaves like the [cmd restrict] subcommand
except that the values of the tuple attributes are
placed in Tcl variables that have
the same name as the attributes.
Each tuple in the body of [arg relationValue] is successively considered
and each attribute of the tuple is assigned to a Tcl variable that is the
same name as the attribute and [arg expression] is evaluated.
The resulting relation has a heading that is the same as [arg relationValue]
and a body consisting of all tuples where [arg expression] evaluated to true.
The [cmd restrictwith] subcommand is roughly equal to performing a
[cmd "tuple assign"] command on each tuple in [arg relationValue] before
evaluating [arg expression].
The attribute variables are created if needed and will overwrite the values
of any variables that are named the same.
Also, the variables are deleted after the command completes.
Also note that [cmd restrictwith] will not function correctly if nested
with a more complex expression that also contains a [cmd restrictwith]
command for a [arg relationValue] with the same heading. In this case
the invocation of one [cmd restrictwith] may very well overwrite the
variables of a separate invocation.
With that restriction in mind,
the [cmd restrictwith] subcommand is often more convenient than
performing all the required [cmd "tuple extract"] commands that are
othewise required.

[example {
% relformat [relation restrictwith $DOG {$DogName eq "Fred"}]
DogName    Breed
 string   string
================
   Fred  Spaniel
}]

[call [cmd "::ral::relation semijoin"] [arg relationValue1]\
    [arg relationValue2] [opt "-using attrList"] [opt "relationValue3 ..."]]

The [cmd semijoin] subcommand computes the join of [arg relationValue1]
and [arg relationValue2] but eliminates all of the attributes of
[arg relationValue1]
(or alternatively speaking, projecting all attributes of [arg relationValue2]).
The returned relation has a heading the same a [arg relationValue2]
and a body consisting of those tuples in [arg relationValue2] that
would have been included in the natural join with [arg relationValue1].
As with [cmd join], if the [arg -using] argument are missing, the
join is computed across the attributes in [arg relationValue1] and
[arg relationValue2] that are named the same.
Otherwise the [arg attrList] argument is treated the same as for the
[cmd join] subcommand.
Also like the [cmd join] subcommand,
additional [arg relationValue] arguments may be given and the
result is computed in left to right order.
This implies that the type of the result is always the type of the right
most [arg relationValue].
For example, to find all the dogs that have some owner:
[emph N.B.] the sense of this command is inverted from previous versions of
this library.

[example {
relformat [relation semijoin $OWNERSHIP $DOG]
DogName      Breed
 string     string
==================
   Fido     Poodle
    Sam     Collie
   Spot    Terrier
  Rover  Retriever
   Fred    Spaniel
}]

[call [cmd "::ral::relation semiminus"] [arg relationValue1]\
    [arg relationValue2] [opt "-using attrList"] [opt "relationValue3 ..."]]

The [cmd semiminus] subcommand computes the difference between
[arg relationValue2] and the semijoin of [arg relationValue1] and
[arg relationValue2].
The returned relation has a heading equal to that of [arg relationValue2]
and a body consisting of those tuples from [arg relationValue2] which would
[emph not] have been included in the natural join of [arg relationValue1]
and [arg relationValue2].
The optional [arg -using] argument is treated in the same way as for
the [cmd join] subcommand.
Also like the [cmd semijoin] subcommand, additional [arg relationValue]
arguments may be given.
[emph N.B.] the sense of this command is inverted from previous versions of
this library.
For example, to find all dogs that have no owner:
[example {
relformat [relation semiminus $OWNERSHIP $DOG]
DogName   Breed
 string  string
===============
 Jumper    Mutt
}]

[call [cmd "::ral::relation summarize"] [arg relationValue] [arg perRelation]\
    [arg relationVarName] [arg attr] [arg type] [arg summary]]

The [cmd summarize] subcommand allows for computations across sets of
attributes.
The [arg perRelation] must be of the same type as a projection of
[arg relationValue].
The returned relation has the same heading as [arg perRelation] extended
by [arg attr].
The [arg attr] gives the name of the new attribute.
The name of the new attribute may not match any existing attributes in
[arg perRelation].
The [arg type] argument is data type of the new attribute.
The body of the returned relation consists of all the tuples of
[arg perRelation] with a value for the new attribute.
That value is computed by evaluating [arg summmary] as an expression.
Before evaluating [arg summary] for a tuple in [arg perRelation],
[arg relationVarName] is set to a relation value consisting of
all the tuples in [arg relationValue] whose attributes match the
corresponding attributes in [arg perRelation].
The [arg summary] expression may then access the value of that relation
using the given [arg relationVarName] variable name.
The [arg summary] command is expected to return a result of the
same type as the new attribute.

In this example we determine the years when dogs were acquired and the
number of dogs acquired in each year.
[example {
set ac [relation project $OWNERSHIP Acquired]
relformat [relation summarize $OWNERSHIP $ac r\ 
    NumAcquired int {[relation cardinality $r]}]
Acquired  NumAcquired
  string          int
=====================
    2001            3
    2000            2
    2002            1
    2003            1
}]

The [cmd summarize] command can also be used to perform
more complicated computations. In the case of summarizing over the
[emph dee] relation gives the ability to compute overall totals or
averages.
In this example we compute the average age of the owners.
[example {
proc ravg {rel attr} {
    set sum 0
    relation foreach t $rel {
	set sum [expr {$sum + [tuple extract $t $attr]}]
    }
    return [expr {$sum / [relation cardinality $rel]}]
}

set dee {Relation {} {{}} {{}}}
relformat [relation summarize $OWNER $dee o AverageAge int {[ravg $o Age]}]
AverageAge
       int
==========
        36
}]

[call [cmd "::ral::relation tclose"] [arg relationValue]]

The [cmd tclose] subcommand returns a new relation value that is the
transitive closure of [arg relationValue].
The [arg relationValue] must be a binary relation and each attribute must
be of the same type.
The returned relation has a heading that is the same as [arg relationValue].
The pairs of attribute values in [arg relationValue] may be considered as
defining the edges of a graph.
The body of the transitive closure will contain all pairs of the two
attributes where there exists some path between the vertices in the implied
graph.
The original [arg relationValue] is necessarily a subset of the transitive
closure relation.

The [cmd tclose] subcommand often useful when there is a hierarchical
relationship among the data values.
Consider the employee / supervisor reporting relationship.
If we are interested in all people who report directly or indirectly
to John, then we have:
[example {
set REPORTS_TO {
    Relation
    {Employee string Supervisor string}
    {{Employee Supervisor}}
    {
        {Employee Sue Supervisor John}
        {Employee Bob Supervisor John}
        {Employee Jane Supervisor Sue}
        {Employee Joe Supervisor Sue}
        {Employee Carl Supervisor Bob}
        {Employee James Supervisor Alice}
    }
}
puts\
    [relformat\ 
        [relation project\ 
            [relation restrictwith\ 
                [relation tclose $REPORTS_TO]\ 
                {$Supervisor eq "John"}\ 
            ]\ 
            Employee \ 
        ]\ 
        "Direct/Indirect Reports to John" \ 
    ]
Direct/Indirect Reports to John
-------------------------------
Employee
  string
========
     Sue
     Bob
    Jane
     Joe
    Carl}]

[call [cmd "::ral::relation times"] [arg relationValue1] [arg relationValue2]\
    [opt "relationValue3 ..."]]

The [cmd times] subcommand returns the extended Cartesian product of two or
more relations.
The heading of the result is the union of the headings of all
the [arg relationValue] arguments.
The body of the result consists of a tuple for all combinations of the tuples
in all the [arg relationValue] arguments.
Since the relational multiplication operation is both
associative and commutative,
the order of the [arg relationValue] arguments has no effect on the result.

[example {
% relformat [relation times $DOG $OWNER]
DogName      Breed  OwnerName  Age           City
 string     string     string  int         string
=================================================
   Fido     Poodle        Sue   24      Cupertino
   Fido     Poodle     George   35      Sunnyvale
   Fido     Poodle      Alice   30       San Jose
   Fido     Poodle       Mike   50       San Jose
   Fido     Poodle        Jim   42  San Francisco
    Sam     Collie        Sue   24      Cupertino
    Sam     Collie     George   35      Sunnyvale
    Sam     Collie      Alice   30       San Jose
    Sam     Collie       Mike   50       San Jose
    Sam     Collie        Jim   42  San Francisco
   Spot    Terrier        Sue   24      Cupertino
   Spot    Terrier     George   35      Sunnyvale
   Spot    Terrier      Alice   30       San Jose
   Spot    Terrier       Mike   50       San Jose
   Spot    Terrier        Jim   42  San Francisco
  Rover  Retriever        Sue   24      Cupertino
  Rover  Retriever     George   35      Sunnyvale
  Rover  Retriever      Alice   30       San Jose
  Rover  Retriever       Mike   50       San Jose
  Rover  Retriever        Jim   42  San Francisco
   Fred    Spaniel        Sue   24      Cupertino
   Fred    Spaniel     George   35      Sunnyvale
   Fred    Spaniel      Alice   30       San Jose
   Fred    Spaniel       Mike   50       San Jose
   Fred    Spaniel        Jim   42  San Francisco
 Jumper       Mutt        Sue   24      Cupertino
 Jumper       Mutt     George   35      Sunnyvale
 Jumper       Mutt      Alice   30       San Jose
 Jumper       Mutt       Mike   50       San Jose
 Jumper       Mutt        Jim   42  San Francisco
}]

[call [cmd "::ral::relation tuple"] [arg relationValue]]

The [cmd tuple] subcommand returns the body of [arg relationValue] as a tuple.
The cardinality of [arg relationValue] must be one or an error is returned.

[call [cmd "::ral::relation ungroup"] [arg relationValue] [arg attribute]]

The [cmd ungroup] subcommand maps relations that have relation valued
attributes to relations that have scalar valued attributes.
It is the complementary operation to the [cmd group] command.
The [arg attribute] argument must be the name of a relation valued
attribute of [arg relationValue].
The returned relation has a heading consisting of all the attributes of
[arg relationValue] minus [arg attribute] plus all the attributes of the
[arg attribute] relation.
The body of the returned relation consists of tuples composed of pairing
each tuple from the [arg attribute] attribute with its corresponding
components from [arg relationValue].

[example {
set da [relation group $OWNERSHIP DogAcquisition Dogname Acquired]
relformat [relation ungroup $da DogAcquisition]
OwnerName  DogName  Acquired
   string   string    string
============================
      Sue     Fido      2001
      Sue      Sam      2000
   George     Fido      2001
   George      Sam      2000
    Alice     Spot      2001
     Mike    Rover      2002
      Jim     Fred      2003
}]

[call [cmd "::ral::relation union"] [arg relationValue1]\
    [arg relationValue2] [opt "relationValue3 ..."]]

The [cmd union] subcommand returns the set union of two or more relations.
All relations must be of the same type.
The result relation has a heading that is the same as any of the arguments
and has a body consisting of all tuples present in any of the
[arg relationValue] arguments.
Since the union operation is both associative and commutative,
the order of the [arg relationValue] arguments has no effect the result.

[list_end]

[see_also relvar tuple]

[keywords relation tuple body]

[manpage_end]
