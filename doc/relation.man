[manpage_begin relation n 0.6]
[moddesc "Operators for Relation Values"]
[titledesc "Relation Operators"]
[copyright "2004 by G. Andrew Mangogna"]
[require ral 0.6]
[description]
This manpage describes the
[cmd relation]
command.
The
[cmd relation]
command is part of the Tcl Relational Algebra Library (ral) package.
[section OVERVIEW]

[section "STRING REPRESENTATION"]
Like any Tcl value, relations have a string representation.
The string representation of a relations is a specially formatted list
consisting of three elements:
[list_begin enum]
[enum]
The keyword [emph Relation].
[enum]
The relation heading.
[enum]
The relation body.
[list_end]
The relation heading is itself a list consisting of two elements.
The first element is the tuple heading for all of the tuples that
are part of the body of the relation.
The tuple heading format is the same as that described in the
[cmd tuple] command.
The second element is a list of identifiers (candidate keys) of the relation.
Each identifer list element is in turn a list containing the attribute
names that constitute the identifier.
Every relation must have at least on identifier.
[para]
The body of a relation consists of a list of tuples.
Each tuple in the body is in the form a list with an
even number of elements consisting
alternately of an attribute name and an attribute value.
[para]
The following is a literal string representation of a relation with
one tuple in its body.
[example_begin]
{Relation {{{DogName string} {Breed string}} DogName} {{DogName Fido Breed Poodle}}}
[example_end]

[section EXAMPLE]
[example_begin]
DOG
DogName      Breed
 string     string
==================
   Fido     Poodle
    Sam     Collie
   Spot    Terrier
  Rover  Retriever
   Fred    Spaniel

OWNER
OwnerName  Age           City
   string  int         string
=============================
      Sue   24      Cupertino
   George   35      Sunnyvale
    Alice   30       San Jose
     Mike   50       San Jose
      Jim   42  San Francisco

OWNERSHIP
OwnerName  DogName  Acquired
   string   string    string
============================
      Sue     Fido      2001
      Sue      Sam      2000
   George     Fido      2001
   George      Sam      2000
    Alice     Spot      2001
     Mike    Rover      2002
      Jim     Fred      2003
[example_end]

[section COMMANDS]
[list_begin definitions]
[call [cmd "::ral::relation cardinality"] [arg relationValue]]

The [cmd cardinality] subcommand returns the number tuples contained
in the body of [arg relationValue].

[example {
% relation cardinality [relvar get DOG]
5
% relation cardinality [relvar get OWNERSHIP]
7
}]

[call [cmd "::ral::relation degree"] [arg relationValue]]

The [cmd degree] subcommand returns the number of attributes in the
tuples of [arg relationValue]

[example {
% relation degree [relvar get DOG]
2
}]

[call [cmd "::ral::relation divide"] [arg dividend] [arg divisor]\
    [arg mediator]]

The [cmd divide] subcommand implements the relational divide operation.
The headings of [arg dividend] and [arg divisor] must be disjoint and
the heading of [arg mediator] must be the union of the [arg dividend]
and [arg divisor] headings.
The returned result is a new relation that has the same heading as
[arg dividend] and contains all the tuples from [arg dividend] whose
corresponding tuples in [arg mediator] include all the tuples in
[arg divisor].
Using the data from our ongoing example, then the following example shows
how division can be used to find all the Dogs owned by both Sue and George.

[example_begin]
Dividend:
	DogName
	 string
	=======
	   Fido
	    Sam
	   Spot
	  Rover
	   Fred

Divisor:
	OwnerName
	   string
	=========
	      Sue
	   George

Mediator:
	OwnerName  DogName
	   string   string
	==================
	      Sue     Fido
	      Sue      Sam
	   George     Fido
	   George      Sam
	    Alice     Spot
	     Mike    Rover
	      Jim     Fred

Quotient:
	DogName
	 string
	=======
	   Fido
	    Sam
[example_end]

[call [cmd "::ral::relation eliminate"] [arg relationValue]\
    [opt "attribute ..."]]

The [cmd eliminate] subcommand returns a new relation that has a heading
equal to that of the [arg relationValue] less any attributes whose names
are given in the [opt attribute] arguments.
The body of the new relation is the same as the body of [arg relationValue]
removing any tuples that might be duplicated as a result of removing the
attributes.
The [cmd eliminate] subcommand is a complement to the [cmd project] command
in the sense that [cmd eliminate] specifies which attributes
to discard and [cmd project] specifies which attribute to keep.

[example {
% relformat [relation eliminate [relvar get DOG] Breed]
DogName
 string
=======
   Fido
    Sam
   Spot
  Rover
   Fred
}]

[call [cmd "::ral::relation emptyof"] [arg relationValue]]
The [cmd emptyof] subcommand returns a new relation that has the same
heading as [arg relationValue] but whose cardinality is zero.

[call [cmd "::ral::relation extend"] [arg relationValue] [arg tupleVariable]\
    [opt "attr1 expr1 attr2 expr2 ..."]]

The [cmd extend] subcommand returns a new relation which has the same
heading as [arg relationValue] with zero or more additional attributes.
The first additional attribute is given by [opt attr1] and its value is
set to the result returned by passing [opt expr1] to the [cmd expr] command.
Subsequent attributes are treated similarly.
As each tuple in the body of [arg relationValue] is considered, its
value is set into the variable whose name is given by the [arg tupleVariable]
argument.
This variable is accessible to the extending expressions so that the
current tuple values of [arg relationValue] are available for computing
the values of the new attributes.

[example {
% relformat [relation extend [relvar get OWNER] owner\
    {AgeInMonths int} {[tuple extract $owner Age] * 12}]
OwnerName  Age           City  AgeInMonths
   string  int         string          int
==========================================
      Sue   24      Cupertino          288
   George   35      Sunnyvale          420
    Alice   30       San Jose          360
     Mike   50       San Jose          600
      Jim   42  San Francisco          504
}]

[call [cmd "::ral::relation foreach"] [arg tupleVariable] [arg relationValue]\
    [opt "ascending | descending"] [opt attr-list] [arg script]]

The [cmd foreach] subcommand provides a means to iterate through the
body of a relation.
For each tuple in the body of [arg relationValue],
the [arg tupleVariable] variable is assigned a value of a tuple and
[arg script] is executed.
The order in which the tuples are considered is unspecified unless
the list of sorting attributes is specified.
In this case the tuples are visited in the [arg ascending] order of
the values of the sorting attibutes if the direction keyword
of [arg ascending] is supplied or if no direction keyword is given.
Tuples can be visited in descending order of the sorting attributes if
the [arg descending] keyword is given.

[example {
% relation foreach d [relvar get DOG] descending DogName {
    puts [tuple extract $d DogName]
}
Spot
Sam
Rover
Fred
Fido
}]

[call [cmd "::ral::relation group"] [arg relationValue] [arg newattribute]\
    [opt "attr1 attr2 ..."]]

[call [cmd "::ral::relation intersect"] [arg relationValue1]\
    [arg relationValue2] [opt "relationValue3 ..."]]

The [cmd intersect] subcommand returns the set intersection of two or
more relations.
All relations must be of the same type.
The result relation has a heading that is the same as any of the arguments
and has a body consisting of all tuples present in all of the
[arg relationValue] arguments.
Since the intersection operation is both associative and commutative,
the order of the [arg relationValue] arguments has no effect the result.

[call [cmd "::ral::relation is"] [arg relationValue1] [arg relop]\
    [arg relationValue2]]

[call [cmd "::ral::relation isempty"] [arg relationValue]]

The [cmd isempty] subcommand returns the boolean value "1" if the
body of [arg relationValue] does not contain any tuples and "0" otherwise.
The [cmd isempty] subcommand is a convenient short hand for the the command
[cmd "expr \{\[::ral::relation cardinality [arg relationValue]] == 0\}"].

[call [cmd "::ral::relation isnotempty"] [arg relationValue]]

The [cmd isnotempty] subcommand returns the boolean value "1" if the
body of [arg relationValue] contains any tuples and "0" otherwise.
The [cmd isnotempty] subcommand is a convenient short hand for the the command
[cmd "expr \{\[::ral::relation cardinality [arg relationValue]] != 0\}"].

[call [cmd "::ral::relation join"] [arg relationValue1] [arg relationValue2]\
    [opt "attr1 attr2 ..."]]

[call [cmd "::ral::relation list"] [arg relationValue]]

The [cmd list] subcommand returns the body of [arg relationValue] as
a proper Tcl list.
[arg RelationValue] must be of degree one or an error is returned.

[example {
% relation list [relation project [relvar get OWNERSHIP] Acquired]]
2001 2000 2002 2003
}]

[call [cmd "::ral::relation minus"] [arg relationValue1] [arg relationValue2]]

The [cmd minus] subcommand returns the set difference between two relations.
The [arg relationValue] arguments must be of the same type and that is the
type of the result relation.
The body of the result consists of those tuples present in
[arg relationValue1] but not present in [arg relationValue2].
Note that the order of the [arg relationValue1] and [arg relationValue2]
arguments is significant to the result.

[call [cmd "::ral::relation project"] [arg relationValue]\
    [opt "attr1 attr2 ..."]]

The [cmd project] subcommand returns a relation whose heading consists of
only those attributes listed in the [arg attr] arguments.
The body of the result consists of tuples the corresponding tuples from
[arg relationValue], removing any duplicates created by considering only
a subset of the attributes.

[example {
% relformat [relation project [relvar get OWNER] City]
         City
       string
=============
    Cupertino
    Sunnyvale
     San Jose
San Francisco
}]

[call [cmd "::ral::relation rename"] [arg relationValue]\
    [opt "oldname newname ..."]]

[call [cmd "::ral::relation restrict"] [arg relationValue] [arg tupleVariable]\
    [arg expression]]

The [cmd restrict] returns a new relation that is a
subset (possibly improper) of [arg relationValue].
Each tuple in the body of [arg relationValue] is successively assigned
to [arg tupleVariable] and [arg expression] is evaluated.
The resulting relation has a heading that is the same as [arg relationValue]
and a body consisting of all tuples where [arg expression] evaluated to true.

[example {
% relformat [relation restrict [relvar get DOG] d {[tuple extract $d DogName] eq "Fred"}]
DogName    Breed
 string   string
================
   Fred  Spaniel
}]

[call [cmd "::ral::relation semijoin"] [arg relationValue1]\
    [arg relationValue2] [opt "attr1 attr2 ..."]]

[call [cmd "::ral::relation semiminus"] [arg relationValue1]\
    [arg relationValue2] [opt "attr1 attr2 ..."]]

[call [cmd "::ral::relation summarize"] [arg relationValue] [arg perRelation]\
    [arg attr-type] [arg cmd] [arg initialValue]]

[call [cmd "::ral::relation times"] [arg relationValue1] [arg relationValue2]\
    [opt "relationValue3 ..."]]

The [cmd times] subcommand returns the extended Cartesian product of two or
more relations.
The result heading is the union of the headings of all the [arg relationValue]
arguments.
The result body consists of a tuple for all combinations of the tuples
in all the [arg relationValue] arguments.
Since the relational multiplication operation is both
associative and commutative,
the order of the [arg relationValue] arguments has not effect on the result.

[example {
% relformat [relation times [relvar get DOG] [relvar get OWNER]]
DogName      Breed  OwnerName  Age           City
 string     string     string  int         string
=================================================
   Fido     Poodle        Sue   24      Cupertino
   Fido     Poodle     George   35      Sunnyvale
   Fido     Poodle      Alice   30       San Jose
   Fido     Poodle       Mike   50       San Jose
   Fido     Poodle        Jim   42  San Francisco
    Sam     Collie        Sue   24      Cupertino
    Sam     Collie     George   35      Sunnyvale
    Sam     Collie      Alice   30       San Jose
    Sam     Collie       Mike   50       San Jose
    Sam     Collie        Jim   42  San Francisco
   Spot    Terrier        Sue   24      Cupertino
   Spot    Terrier     George   35      Sunnyvale
   Spot    Terrier      Alice   30       San Jose
   Spot    Terrier       Mike   50       San Jose
   Spot    Terrier        Jim   42  San Francisco
  Rover  Retriever        Sue   24      Cupertino
  Rover  Retriever     George   35      Sunnyvale
  Rover  Retriever      Alice   30       San Jose
  Rover  Retriever       Mike   50       San Jose
  Rover  Retriever        Jim   42  San Francisco
   Fred    Spaniel        Sue   24      Cupertino
   Fred    Spaniel     George   35      Sunnyvale
   Fred    Spaniel      Alice   30       San Jose
   Fred    Spaniel       Mike   50       San Jose
   Fred    Spaniel        Jim   42  San Francisco
}]

[call [cmd "::ral::relation tuple"] [arg relationValue]]

The [cmd tuple] subcommand returns the body of [arg relationValue] as a tuple.
The cardinality of [arg relationValue] must be one or an error is returned.

[call [cmd "::ral::relation typeof"] [arg relationValue]]

The [cmd typeof] subcommand returns type of [arg relationValue].
The type of a relation is the same as the first two elements of its
string representation.

[example {
% relation typeof [relvar get DOG]
Relation {{{DogName string} {Breed string}} DogName}
}]

[call [cmd "::ral::relation ungroup"] [arg relationValue] [arg attribute]]

[list_end]

[see_also relvar tuple]

[keywords relation tuple body]
[manpage_end]
