#!/bin/sh
# \
exec tclsh "$0" "$@"
# This software is copyrighted 2004 by G. Andrew Mangogna.  The following
# terms apply to all files associated with the software unless explicitly
# disclaimed in individual files.
# 
# The authors hereby grant permission to use, copy, modify, distribute,
# and license this software and its documentation for any purpose, provided
# that existing copyright notices are retained in all copies and that this
# notice is included verbatim in any distributions. No written agreement,
# license, or royalty fee is required for any of the authorized uses.
# Modifications to this software may be copyrighted by their authors and
# need not follow the licensing terms described here, provided that the
# new terms are clearly indicated on the first page of each file where
# they apply.
# 
# IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY FOR
# DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING
# OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY DERIVATIVES
# THEREOF, EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT.  THIS SOFTWARE
# IS PROVIDED ON AN "AS IS" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE
# NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS,
# OR MODIFICATIONS.
# 
# GOVERNMENT USE: If you are acquiring this software on behalf of the
# U.S. government, the Government shall have only "Restricted Rights"
# in the software and related documentation as defined in the Federal
# Acquisition Regulations (FARs) in Clause 52.227.19 (c) (2).  If you
# are acquiring the software on behalf of the Department of Defense,
# the software shall be classified as "Commercial Computer Software"
# and the Government shall have only "Restricted Rights" as defined in
# Clause 252.227-7013 (c) (1) of DFARs.  Notwithstanding the foregoing,
# the authors grant the U.S. Government and others acting in its behalf
# permission to use and distribute the software in accordance with the
# terms specified in this license.
# 
#  *++
# MODULE:
# 
# ABSTRACT:
# 
# $RCSfile: ral.test,v $
# $Revision: 1.4 $
# $Date: 2004/05/01 17:24:14 $
#  *--

package require tcltest 2.2
eval tcltest::configure $argv
load [file join .. src libral[info sharedlibextension]]

namespace eval ::ral::test {
    namespace import ::tcltest::*
    namespace import ::ral::*

    proc createPartsDB {} {
	variable S
	relvar create S\
	    {{S# string} {SNAME string} {STATUS int} {CITY string}}\
	    S#\
	    {S# S1 SNAME Smith STATUS 20 CITY London}\
	    {S# S2 SNAME Jones STATUS 10 CITY Paris}\
	    {S# S3 SNAME Blake STATUS 30 CITY Paris}\
	    {S# S4 SNAME Clark STATUS 20 CITY London}\
	    {S# S5 SNAME Adams STATUS 30 CITY Athens}

	variable P
	relvar create P\
	    {{P# string} {PNAME string} {COLOR string} {WEIGHT double}\
		{CITY string}}\
	    P#\
	    {P# P1 PNAME Nut COLOR Red WEIGHT 12.0 CITY London}\
	    {P# P2 PNAME Bolt COLOR Green WEIGHT 17.0 CITY Paris}\
	    {P# P3 PNAME Screw COLOR Blue WEIGHT 17.0 CITY Oslo}\
	    {P# P4 PNAME Screw COLOR Red WEIGHT 14.0 CITY London}\
	    {P# P5 PNAME Cam COLOR Blue WEIGHT 12.0 CITY Paris}\
	    {P# P6 PNAME Cog COLOR Red WEIGHT 19.0 CITY London}

	variable SP
	relvar create SP\
	    {{S# string} {P# string} {QTY int}}\
	    {{S# P#}}\
	    {S# S1 P# P1 QTY 300}\
	    {S# S1 P# P2 QTY 200}\
	    {S# S1 P# P3 QTY 400}\
	    {S# S1 P# P4 QTY 200}\
	    {S# S1 P# P5 QTY 100}\
	    {S# S1 P# P6 QTY 100}\
	    {S# S2 P# P1 QTY 300}\
	    {S# S2 P# P2 QTY 400}\
	    {S# S3 P# P2 QTY 200}\
	    {S# S4 P# P2 QTY 200}\
	    {S# S4 P# P4 QTY 300}\
	    {S# S4 P# P5 QTY 400}
    }

    # Procedures that can be used for accumulations
    proc count {start tuple} {
	return [expr {$start + 1}]
    }

    proc sum {attr start t} {
	return [expr {$start + [tuple extract $t $attr]}]
    }

    proc max {attr start t} {
	set cmp [tuple extract $t $attr]
	puts "cmp = $cmp"
	puts "tuple = $t"
	return [expr {$cmp > $start ? $cmp : $start}]
    }

    proc min {attr start t} {
	set cmp [tuple extract $t $attr]
	return [expr {$cmp < $start ? $cmp : $start}]
    }

    # Tuple Tests

    # tuple assign subcommand
    test tuple-assign-1.0 {single attribute} -body {
	tuple assign {Tuple Name {Name Andrew}}
	expr {$Name eq "Andrew"}
    } -result 1

    test tuple-assign-2.0 {multiple attributes} -body {
	tuple assign {Tuple {Name {Age int}} {Name Andrew Age 20}}
	expr {$Name eq "Andrew" && $Age == 20}
    } -result 1

    # tuple create subcommand
    test tuple-create-1.0 {single attribute} -body {
	tuple create {{Name string}} {Name Andrew}
    } -result {Tuple {{Name string}} {Name Andrew}}

    test tuple-create-2.0 {multiple attributes} -body {
	set h {{Name string} {Age int}}
	tuple create $h {Name Andrew Age 20}
    } -result {Tuple {{Name string} {Age int}} {Name Andrew Age 20}}

    test tuple-create-3.0 {bad format} -body {
	set h {{Name string} {Age int}}
	tuple create $h {Name Andrew foo}
    } -result {list must have an even number of elements} -returnCodes error

    test tuple-create-4.0 {unknown attribute} -body {
	set h {{Name string} {Age int}}
	tuple create $h {Name Andrew foo 20}
    } -result {unknown attribute name, "foo"} -returnCodes error

    test tuple-create-5.0 {bad value type} -body {
	set h {{Name string} {Age int}}
	tuple create $h {Name Andrew Age foo}
    } -result {expected integer but got "foo"} -returnCodes error

    test tuple-create-6.0 {multiple assignment} -body {
	set h {{Name string} {Age int}}
	tuple create $h {Name Andrew Name foo}
    } -result {attribute, "Name", assigned a value multiple times}\
    -returnCodes error

    test tuple-create-7.0 {different ordering} -body {
	set h {{Name string} {Age int}}
	tuple create $h {Age 20 Name Andrew}
    } -result {Tuple {{Name string} {Age int}} {Name Andrew Age 20}}

    test tuple-create-8.0 {empty tuple} -body {
	tuple create {} {}
    } -result {Tuple {} {}}

    # tuple degree subcommand
    test tuple-degree-1.0 {single attribute} -body {
	tuple degree {Tuple Name {Name Andrew}}
    } -result 1

    test tuple-degree-2.0 {multiple attributes} -body {
	tuple degree {Tuple {{Name string} {Age int}} {Age 20 Name Andrew}}
    } -result 2

    test tuple-degree-3.0 {empty tuple} -body {
	tuple degree {Tuple {} {}}
    } -result 0

    # tuple eliminate subcommand
    test tuple-eliminate-1.0 {single attribute} -body {
	tuple eliminate {Tuple {{Name string}} {Name Andrew}} Name
    } -result {Tuple {} {}}

    test tuple-eliminate-2.0 {multiple attributes} -body {
	tuple eliminate {Tuple {{Name string} {Age int} {Size double}}\
	    {Name Andrew Age 20 Size 1.0}} Age Size
    } -result {Tuple {{Name string}} {Name Andrew}}

    test tuple-eliminate-3.0 {non-existent attribute} -body {
	tuple eliminate {Tuple {{Name string} {Age int} {Size double}}\
	    {Name Andrew Age 20 Size 1.0}} foo
    } -result {attribute, "foo", is not a member of the tuple,\
	"Tuple {{Name string} {Age int} {Size double}}\
	{Name Andrew Age 20 Size 1.0}"}\
    -returnCodes error

    # tuple equal subcommand
    test tuple-equal-1.0 {single attribute, match} -body {
	set t1 {Tuple {{Name string}} {Name Andrew}}
	set t2 {Tuple {{Name string}} {Name Andrew}}
	tuple equal $t1 $t2
    } -result 1

    test tuple-equal-2.0 {multiple attributes, match} -body {
	set t1 {Tuple {{Name string} {Age int}} {Age 20 Name Andrew}}
	set t2 {Tuple {{Name string} {Age int}} {Name Andrew Age 20}}
	tuple equal $t1 $t2
    } -result 1

    test tuple-equal-3.0 {single attribute, value mismatch} -body {
	set t1 {Tuple {{Name string}} {Name Andrew}}
	set t2 {Tuple {{Name string}} {Name George}}
	tuple equal $t1 $t2
    } -result 0

    test tuple-equal-4.0 {single attribute, attribute name mismatch} -body {
	set t1 {Tuple {{Name string}} {Name Andrew}}
	set t2 {Tuple {{name string}} {name George}}
	tuple equal $t1 $t2
    } -result 0

    test tuple-equal-5.0 {single attribute, type mismatch} -body {
	set t1 {Tuple {{Name string}} {Name 20}}
	set t2 {Tuple {{Name int}} {Name 40}}
	tuple equal $t1 $t2
    } -result 0

    test tuple-equal-6.0 {multiple attributes, value mismatch} -body {
	set t1 {Tuple {{Name string} {Age int}} {Age 20 Name Andrew}}
	set t2 {Tuple {{Name string} {Age int}} {Name Andrew Age 30}}
	tuple equal $t1 $t2
    } -result 0

    test tuple-equal-7.0 {multiple attributes, match, out of order} -body {
	set t1 {Tuple {{Name string} {Age int} {Size double}}\
	    {Name Andrew Age 20 Size 1.0}}
	set t2 {Tuple {{Size double} {Name string} {Age int}}\
	    {Name Andrew Age 20 Size 1.0}}
	tuple equal $t1 $t2
    } -result 1

    test tuple-equal-8.0 {multiple attributes, match, value variations} -body {
	set t1 {Tuple {{Name string} {Age int} {Size double}}\
	    {Name Andrew Age 0x20 Size 12.30}}
	set t2 {Tuple {{Size double} {Name string} {Age int}}\
	    {Name Andrew Age 32 Size 1.23e1}}
	tuple equal $t1 $t2
    } -result 1

    # tuple extend subcommand
    test tuple-extend-1.0 {single attribute} -body {
	set t {Tuple {{Name string}} {Name Andrew}}
	tuple extend $t {Age int 20}
    } -result {Tuple {{Name string} {Age int}} {Name Andrew Age 20}}

    test tuple-extend-2.0 {multiple attributes} -body {
	set t {Tuple {{Name string}} {Name Andrew}}
	tuple extend $t {Age int 20} {Size double 1.3}
    } -result {Tuple {{Name string} {Age int} {Size double}}\
	{Name Andrew Age 20 Size 1.3}}

    test tuple-extend-3.0 {duplicate name} -body {
	set t {Tuple {{Name string}} {Name Andrew}}
	tuple extend $t {Name int 20}
    } -result {duplicate attribute name, "Name"} -returnCodes 1

    test tuple-extend-4.0 {bad value} -body {
	set t {Tuple {{Name string}} {Name Andrew}}
	tuple extend $t {Age int foo}
    } -result {expected integer but got "foo"} -returnCodes 1

    test tuple-extend-5.0 {bad type} -body {
	set t {Tuple {{Name string}} {Name Andrew}}
	tuple extend $t {Age foo foo}
    } -result {unknown data type, "foo"} -returnCodes error

    # tuple extract subcommand
    test tuple-extract-1.0 {single attribute} -body {
	set t {Tuple {{Name string}} {Name Andrew}}
	tuple extract $t Name
    } -result {Andrew}

    test tuple-extract-2.0 {multiple attributes} -body {
	set t {Tuple {{Name string} {Age int} {Size double}}\
	    {Name Andrew Age 20 Size 1.3}}
	tuple extract $t Age Size
    } -result {20 1.3}

    test tuple-extract-3.0 {unknown attribute} -body {
	set t {Tuple {{Name string} {Age int} {Size double}}\
	    {Name Andrew Age 20 Size 1.3}}
	tuple extract $t foo
    } -result {unknown attribute name, "foo"} -returnCodes error

    # tuple get subcommand
    test tuple-get-1.0 {single attribute} -body {
	tuple get {Tuple {{Name string}} {Name Andrew}}
    } -result {Name Andrew}

    test tuple-get-2.0 {multiple attributes} -body {
	tuple get {Tuple {{Name string} {Age int} {Size double}}\
	    {Name Andrew Age 20 Size 1.3}}
    } -result {Name Andrew Age 20 Size 1.3}

    # tuple project subcommand
    test tuple-project-1.0 {single attribute} -body {
	set t {Tuple {{Name string}} {Name Andrew}}
	tuple project $t Name
    } -result {Tuple {{Name string}} {Name Andrew}}

    test tuple-project-2.0 {multiple attributes} -body {
	set t {Tuple {{Name string} {Age int} {Size double}}\
	    {Name Andrew Age 20 Size 1.3}}
	tuple project $t Name Age
    } -result {Tuple {{Name string} {Age int}} {Name Andrew Age 20}}

    test tuple-project-3.0 {project nothing} -body {
	set t {Tuple {{Name string} {Age int}} {Name Andrew Age 20}}
	tuple project $t
    } -result {Tuple {} {}}

    test tuple-project-4.0 {project everything} -body {
	set t {Tuple {{Name string} {Age int}} {Name Andrew Age 20}}
	tuple project $t Name Age
    } -result {Tuple {{Name string} {Age int}} {Name Andrew Age 20}}

    test tuple-project-5.0 {unknown attribute} -body {
	set t {Tuple {{Name string} {Age int}} {Name Andrew Age 20}}
	tuple project $t foo
    } -result {unknown attribute name, "foo"} -returnCodes 1

    # tuple rename subcommand
    test tuple-rename-1.0 {single attribute} -setup {
	set t [tuple create {{Name string}} {Name Andrew}]
    } -body {
	tuple rename $t Name Age
    } -result {Tuple {{Age string}} {Age Andrew}}

    test tuple-rename-2.0 {multiple attributes} -setup {
	set t [tuple create {{Name string} {Age int}}\
	    {Name Andrew Age 20}]
    } -body {
	tuple rename $t Name foo
    } -result {Tuple {{foo string} {Age int}} {foo Andrew Age 20}}

    test tuple-rename-3.0 {unknown attribute} -setup {
	set t [tuple create {{Name string} {Age int}}\
	    {Name Andrew Age 20}]
    } -body {
	tuple rename $t foo Name
    } -result {unknown attribute name, "foo"} -returnCodes error

    test tuple-rename-4.0 {unpaired attributes} -setup {
	set t [tuple create {{Name string} {Age int}}\
	    {Name Andrew Age 20}]
    } -body {
	tuple rename $t foo Name bar
    } -result {oldname / newname arguments must come in pairs}\
    -returnCodes error

    test tuple-rename-5.0 {multiple renamings} -setup {
	set t [tuple create {{Name string} {Age int}}\
	    {Name Andrew Age 20}]
    } -body {
	tuple rename $t Age bar Name foo
    } -result {Tuple {{foo string} {bar int}} {foo Andrew bar 20}}

    test tuple-rename-6.0 {same attribute, multiple renamings} -setup {
	set t [tuple create {{Name string} {Age int}}\
	    {Name Andrew Age 20}]
    } -body {
	tuple rename $t Name foo foo bar bar baz
    } -result {Tuple {{baz string} {Age int}} {baz Andrew Age 20}}

    test tuple-rename-7.0 {existing attribute} -setup {
	set t [tuple create {{Name string} {Age int}}\
	    {Name Andrew Age 20}]
    } -body {
	tuple rename $t Name Age
    } -result {duplicate attribute name, "Age"} -returnCodes error

    # tuple typeof subcommand
    test tuple-typeof-1.0 {single attribute} -setup {
	set t [tuple create {{Name string}} {Name Andrew}]
    } -body {
	tuple typeof $t
    } -result {Tuple {{Name string}}}

    test tuple-typeof-2.0 {multiple attributes} -setup {
	set t [tuple create {Name {Age int} {Size double}}\
	    {Name Andrew Age 20 Size 3.0}]
    } -body {
	tuple typeof $t
    } -result {Tuple {{Name string} {Age int} {Size double}}}

    # tuple unwrap subcommand
    test tuple-unwrap-1.0 {unwrap multiple attributes} -setup {
	set t [tuple create\
	    {{Name string}\
		{Address {Tuple {{Number int} {Street string} {City string}}}}}\
	    {Name Andrew Address {Number 599 Street Blackwood City Sunnyvale}}]
    } -body {
	tuple unwrap $t Address
    } -result {Tuple {{Name string} {Number int} {Street string} {City string}}\
	{Name Andrew Number 599 Street Blackwood City Sunnyvale}}

    test tuple-unwrap-2.0 {unwrap single attribute} -setup {
	set t [tuple create\
	    {{Name string} {Address {Tuple {{Number int}}}}}\
	    {Name Andrew Address {Number 599}}]
    } -body {
	tuple unwrap $t Address
    } -result {Tuple {{Name string} {Number int}} {Name Andrew Number 599}}

    test tuple-unwrap-3.0 {unknown unwrap attribute} -setup {
	set t [tuple create\
	    {{Name string}\
		{Address {Tuple {{Number int} {Street string} {City string}}}}}\
	    {Name Andrew Address {Number 599 Street Blackwood City Sunnyvale}}]
    } -body {
	tuple unwrap $t foo
    } -result {unknown attribute name, "foo"} -returnCodes error

    test tuple-unwrap-4.0 {non-tuple unwrap attribute} -setup {
	set t [tuple create\
	    {{Name string}\
		{Address {Tuple {{Number int} {Street string} {City string}}}}}\
	    {Name Andrew Address {Number 599 Street Blackwood City Sunnyvale}}]
    } -body {
	tuple unwrap $t Name
    } -result {attribute, "Name", is not of type Tuple} -returnCodes error

    # tuple update subcommand
    test tuple-update-1.0 {single attribute} -setup {
	set t [tuple create {{Name string} {Age int} {Size double}}\
	    {Name Andrew Age 20 Size 3.0}]
    } -body {
	tuple update t {Age 40}
    } -result {Tuple {{Name string} {Age int} {Size double}}\
	    {Name Andrew Age 40 Size 3.0}}

    test tuple-update-2.0 {multiple attributes} -setup {
	set t [tuple create {{Name string} {Age int} {Size double}}\
	    {Name Andrew Age 20 Size 3.0}]
    } -body {
	tuple update t {Age 40 Size 33.0}
    } -result {Tuple {{Name string} {Age int} {Size double}}\
	    {Name Andrew Age 40 Size 33.0}}

    test tuple-update-3.0 {unknown attribute} -setup {
	set t [tuple create {{Name string} {Age int} {Size double}}\
	    {Name Andrew Age 20 Size 3.0}]
    } -body {
	tuple update t {foo 40}
    } -result {unknown attribute name, "foo"} -returnCodes error

    test tuple-update-4.0 {bad type} -setup {
	set t [tuple create {{Name string} {Age int} {Size double}}\
	    {Name Andrew Age 20 Size 3.0}]
    } -body {
	tuple update t {Age foo}
    } -result {expected integer but got "foo"} -returnCodes error

    # tuple wrap subcommand
    test tuple-wrap-1.0 {wrap 1 attribute} -setup {
	set t [tuple create {{Name string} {Age int} {Size double}}\
	    {Age 20 Name Andrew Size 3.0}]
    } -body {
	tuple wrap $t Props {Age}
    } -result {Tuple {{Name string} {Size double} {Props {Tuple {{Age int}}}}}\
	{Name Andrew Size 3.0 Props {Age 20}}}

    test tuple-wrap-2.0 {wrap multiple attributes} -setup {
	set t [tuple create {{Name string} {Age int} {Size double}}\
	    {Age 20 Name Andrew Size 3.0}]
    } -body {
	tuple wrap $t Props {Age Size}
    } -result {Tuple {{Name string} {Props {Tuple {{Age int} {Size double}}}}}\
	{Name Andrew Props {Age 20 Size 3.0}}}

    test tuple-wrap-3.0 {wrap all attributes} -setup {
	set t [tuple create {{Name string} {Age int} {Size double}}\
	    {Age 20 Name Andrew Size 3.0}]
    } -body {
	tuple wrap $t Props {Name Age Size}
    } -result {Tuple {{Props {Tuple {{Name string} {Age int} {Size double}}}}}\
	{Props {Name Andrew Age 20 Size 3.0}}}

    test tuple-wrap-4.0 {non-existent attribute to wrap} -setup {
	set t [tuple create {{Name string} {Age int} {Size double}}\
	    {Age 20 Name Andrew Size 3.0}]
    } -body {
	tuple wrap $t Props {foo}
    } -result {unknown attribute name, "foo"} -returnCodes error

    test tuple-wrap-5.0 {wrap same attribute multiple times} -setup {
	set t [tuple create {{Name string} {Age int} {Size double}}\
	    {Age 20 Name Andrew Size 3.0}]
    } -body {
	tuple wrap $t Props {Name Age Name}
    } -result {duplicate attribute name, "Name"} -returnCodes error

    test tuple-wrap-6.0 {wrap attribute is a duplicate} -setup {
	set t [tuple create {{Name string} {Age int} {Size double}}\
	    {Age 20 Name Andrew Size 3.0}]
    } -body {
	tuple wrap $t Size {Name Age}
    } -result {duplicate attribute name, "Size"} -returnCodes error

    # Relvar Tests

    # relvar create subcommand
    test relvar-create-1.0 {single attribute, single body tuple} -body {
	relvar create N Name Name {Name Andrew}
    } -cleanup {
	relvar destroy N
    } -result {Relation {{{Name string}} Name} {{Name Andrew}}}

    test relvar-create-2.0 {multiple attributes, single body tuple} -body {
	relvar create N {Name {Age int}} Name {Name Andrew Age 20}
    } -cleanup {
	relvar destroy N
    } -result {Relation {{{Name string} {Age int}} Name} {{Name Andrew Age 20}}}

    test relvar-create-3.0 {single attribute, multiple body tuples} -body {
	relvar create N Name Name {Name Andrew} {Name George} {Name Fred}
    } -cleanup {
	relvar destroy N
    } -result {Relation {{{Name string}} Name}\
	{{Name Andrew} {Name George} {Name Fred}}}

    test relvar-create-4.0 {multiple attributes, multiple body tuples} -body {
	relvar create N {Name {Age int}} Name\
	    {Name Andrew Age 20}\
	    {Name George Age 20}\
	    {Name Fred Age 20}
    } -cleanup {
	relvar destroy N
    } -result {Relation {{{Name string} {Age int}} Name}\
	{{Name Andrew Age 20} {Name George Age 20} {Name Fred Age 20}}}

    test relvar-create-5.0 {arbitrary attribute ordering} -body {
	relvar create N {Name {Age int} City} Name\
	    {Name Andrew Age 20 City Sunnyvale}\
	    {Age 20 Name George City {San Jose}}\
	    {Name Fred City Saratoga Age 20}
    } -cleanup {
	relvar destroy N
    } -result {Relation {{{Name string} {Age int} {City string}} Name}\
	{{Name Andrew Age 20 City Sunnyvale}\
	 {Name George Age 20 City {San Jose}}\
	 {Name Fred Age 20 City Saratoga}}}

    test relvar-create-6.0 {empty relvar} -body {
	relvar create N Name Name
    } -cleanup {
	relvar destroy N
    } -result {Relation {{{Name string}} Name} {}}

    test relvar-create-7.0 {dee relvar} -body {
	relvar create DEE {} {} {}
    } -cleanup {
	relvar destroy DEE
    } -result {Relation {{} {}} {{}}}

    test relvar-create-8.0 {dum relvar} -body {
	relvar create DUM {} {}
    } -cleanup {
	relvar destroy DUM
    } -result {Relation {{} {}} {}}

    test relvar-create-9.0 {duplicate body tuple} -body {
	relvar create N {Name {Age int}} Name\
	    {Name Andrew Age 20}\
	    {Name George Age 20}\
	    {Name Andrew Age 20}
    } -result {tuple, "Name Andrew Age 20",\
	contains duplicate values for the identifier, "Name"}\
    -returnCodes error

    test relvar-create-10.0 {identifier with multiple attributes} -body {
	relvar create N {Name {Age int}} {{Name Age}}\
	    {Name Andrew Age 20}\
	    {Name George Age 20}\
	    {Name Fred Age 20}
    } -cleanup {
	relvar destroy N
    } -result {Relation {{{Name string} {Age int}} {{Name Age}}}\
	{{Name Andrew Age 20} {Name George Age 20} {Name Fred Age 20}}}

    test relvar-create-11.0 {multiple identifiers} -body {
	relvar create N {Name {Age int}} {Name Age}\
	    {Name Andrew Age 10}\
	    {Name George Age 20}\
	    {Name Fred Age 30}
    } -cleanup {
	relvar destroy N
    } -result {Relation {{{Name string} {Age int}} {Name Age}}\
	{{Name Andrew Age 10} {Name George Age 20} {Name Fred Age 30}}}

    test relvar-create-11.0 {multiple identifiers with duplicates} -body {
	relvar create N {Name {Age int}} {Name Age}\
	    {Name Andrew Age 10}\
	    {Name George Age 20}\
	    {Name Fred Age 20}
    } -result {tuple, "Name Fred Age 20",\
	contains duplicate values for the identifier, "Age"}\
    -returnCodes error

    test relvar-create-12.0 {overlapping identifiers} -body {
	relvar create N {Name {Age int}} {Name {Name Age}}\
	    {Name Andrew Age 10}\
	    {Name George Age 20}\
	    {Name Fred Age 30}
    } -result {identifier, "Name, Age", is not irreducible with\
	respect to least one other indentifier}\
    -returnCodes error

    test relvar-create-13.0 {tuple type attribute} -body {
	relvar create N\
	    {Name {Address {Tuple {{Number int} Street}}}}\
	    Name\
	    {Name Fred Address {Number 500 Street Main}}\
	    {Address {Number 600 Street Elm} Name Alice}
    } -cleanup {
	relvar destroy N
    } -result {Relation {{{Name string} {Address {Tuple {{Number int} {Street string}}}}} Name} {{Name Fred Address {Number 500 Street Main}} {Name Alice Address {Number 600 Street Elm}}}}

    test relvar-create-14.0 {relation type attribute} -body {
	relvar create N\
	    {Name {Dog {Relation {{DogName Breed} DogName}}}}\
	    Name\
	    {Name Fred Dog {\
		{DogName Rover Breed Terrier}\
		{DogName Missy Breed Poodle}}}\
	    {Name Alice Dog {\
		{DogName Tiger Breed Setter}}}
    } -cleanup {
	relvar destroy N
    } -result {Relation {{{Name string} {Dog {Relation {{{DogName string} {Breed string}} DogName}}}} Name} {{Name Fred Dog {{DogName Rover Breed Terrier} {DogName Missy Breed Poodle}}} {Name Alice Dog {{DogName Tiger Breed Setter}}}}}

    # Relation Tests
    createPartsDB

    # relation accumulate subcommand
    test relation-accumulate-1.0 {count} -body {
	set SP [relvar get SP]
	set cnt [relation accumulate $SP count 0]
	expr {$cnt == [relation cardinality $SP]}
    } -result 1

    test relation-accumulate-1.0 {sum} -body {
	set SP [relvar get SP]
	set cnt [relation accumulate $SP [list sum QTY] 0]
    } -result 3100

    # relation cardinality subcommand
    test relation-cardinality-1.0 {dum relation} -body {
	relation cardinality {Relation {{} {}} {}}
    } -result 0

    test relation-cardinality-2.0 {dee relation} -body {
	relation cardinality {Relation {{} {}} {{}}}
    } -result 1

    test relation-cardinality-3.0 {multiple body tuples} -body {
	relation cardinality [relvar get S]
    } -result 5

    # relation degree subcommand
    test relation-degree-1.0 {dum relation} -body {
	relation degree {Relation {{} {}} {}}
    } -result 0

    test relation-degree-2.0 {single attribute} -body {
	relation degree {Relation {Name Name} {}}
    } -result 1

    test relation-degree-3.0 {multiple attributes} -body {
	relation degree [relvar get S]
    } -result 4

    # relation empty subcommand
    test relation-empty-1.0 {dum relation} -body {
	relation empty {Relation {{} {}} {}}
    } -result 1

    test relation-empty-2.0 {dee relation} -body {
	relation empty {Relation {{} {}} {{}}}
    } -result 0

    test relation-empty-3.0 {multiple body tuples} -body {
	relation empty [relvar get P]
    } -result 0

    # relation notempty subcommand
    test relation-notempty-1.0 {dum relation} -body {
	relation notempty {Relation {{} {}} {}}
    } -result 0

    test relation-notempty-2.0 {dee relation} -body {
	relation notempty {Relation {{} {}} {{}}}
    } -result 1

    test relation-notempty-3.0 {multiple body tuples} -body {
	relation notempty [relvar get P]
    } -result 1

    # relation rename subcommand
    test relation-rename-1.0 {single attribute} -body {
	set r {Relation {Name Name} {{Name Andrew}}}
	relation rename $r Name foo
    } -result {Relation {{{foo string}} foo} {{foo Andrew}}}

    test relation-rename-2.0 {multiple attributes} -body {
	set r {Relation {{{Name string} {Age int} {City string}} Name}\
	{{Name Andrew Age 30 City Sunnyvale}\
	 {Name George Age 20 City {San Jose}}}}
	relation rename $r Age Status
    } -result {Relation {{{Name string} {Status int} {City string}} Name}\
	{{Name Andrew Status 30 City Sunnyvale}\
	 {Name George Status 20 City {San Jose}}}}

    # relation tuple subcommand
    test relation-tuple-1.0 {single attribute} -body {
	set t [relation tuple {Relation {Name Name} {{Name Andrew}}}]
	tuple equal $t {Tuple {{Name string}} {Name Andrew}}
    } -result 1

    test relation-tuple-2.0 {multiple attributes} -body {
	set r {Relation {{Name {Age int}} Name} {{Name Andrew Age 20}}}
	set t [relation tuple $r]
	tuple equal $t {Tuple {{Name string} {Age int}} {Name Andrew Age 20}}
    } -result 1

    test relation-tuple-3.0 {body too long} -body {
	set r {Relation {{Name {Age int}} Name}\
	    {{Name Andrew Age 20}\
	     {Name George Age 20}}}
	relation tuple $r
    } -result {relation must have cardinality of one} -returnCodes error

    # relation typeof subcommand
    test relation-typeof-1.0 {dum relation} -body {
	relation typeof {Relation {{} {}} {}}
    } -result {Relation {{} {}}}

    test relation-typeof-2.0 {dee relation} -body {
	relation typeof {Relation {{} {}} {{}}}
    } -result {Relation {{} {}}}

    test relation-typeof-3.0 {single attribute} -body {
	relation typeof {Relation {Name Name} {{Name Andrew}}}
    } -result {Relation {{{Name string}} Name}}

    test relation-typeof-4.0 {multiple attributes} -body {
	relation typeof [relvar get SP]
    } -result {Relation {{{S# string} {P# string} {QTY int}} {{S# P#}}}}

    # relation union subcommand
    test relation-union-1.0 {dum relation} -body {
	set r {Relation {{} {}} {}}
	relation union $r $r
    } -result {Relation {{} {}} {}}

    test relation-union-2.0 {dee relation} -body {
	set r {Relation {{} {}} {{}}}
	relation union $r $r
    } -result {Relation {{} {}} {{}}}

    test relation-union-3.0 {disjoint sets} -body {
	set r1 {Relation {{{Name string} {Age int} {City string}} Name}\
	    {{Name Andrew Age 30 City Sunnyvale}}}
	set r2 {Relation {{{Name string} {Age int} {City string}} Name}\
	    {{Name George Age 20 City {San Jose}}}}
	relation union $r1 $r2
    } -result {Relation {{{Name string} {Age int} {City string}} Name}\
	{{Name Andrew Age 30 City Sunnyvale}\
	 {Name George Age 20 City {San Jose}}}}

    test relation-union-4.0 {relations with common tuples} -body {
	set r1 {Relation {{{Name string} {Age int} {City string}} Name}\
	    {{Name Andrew Age 30 City Sunnyvale}}}
	set r2 {Relation {{{Name string} {Age int} {City string}} Name}\
	    {{Name Andrew Age 30 City Sunnyvale}\
	    {Name George Age 20 City {San Jose}}}}
	relation union $r1 $r2
    } -result {Relation {{{Name string} {Age int} {City string}} Name}\
	{{Name Andrew Age 30 City Sunnyvale}\
	 {Name George Age 20 City {San Jose}}}}

    test relation-union-5.0 {union of more than two relations} -body {
	set r1 {Relation {{{Name string} {Age int} {City string}} Name}\
	    {{Name Andrew Age 30 City Sunnyvale}}}
	set r2 {Relation {{{Name string} {Age int} {City string}} Name}\
	    {{Name George Age 20 City {San Jose}}}}
	set r3 {Relation {{{Name string} {Age int} {City string}} Name}\
	    {{Name Fred Age 10 City Saratoga}}}
	relation union $r1 $r2 $r3
    } -result {Relation {{{Name string} {Age int} {City string}} Name}\
	{{Name Andrew Age 30 City Sunnyvale}\
	 {Name George Age 20 City {San Jose}}\
	 {Name Fred Age 10 City Saratoga}}}

    test relation-union-6.0 {union of more than two, common tuples } -body {
	set r1 {Relation {{{Name string} {Age int} {City string}} Name}\
	    {{Name Andrew Age 30 City Sunnyvale}}}
	set r2 {Relation {{{Name string} {Age int} {City string}} Name}\
	    {{Name George Age 20 City {San Jose}}\
	    {Name Andrew Age 30 City Sunnyvale}}}
	set r3 {Relation {{{Name string} {Age int} {City string}} Name}\
	    {{Name George Age 20 City {San Jose}}\
	    {Name Fred Age 10 City Saratoga}}}
	relation union $r1 $r2 $r3
    } -result {Relation {{{Name string} {Age int} {City string}} Name}\
	{{Name Andrew Age 30 City Sunnyvale}\
	 {Name George Age 20 City {San Jose}}\
	 {Name Fred Age 10 City Saratoga}}}

    test relation-union-7.0 {type mismatch} -body {
	set r1 {Relation {{{Name string} {Age int} {City string}} Name}\
	    {{Name Andrew Age 30 City Sunnyvale}}}
	set r2 {Relation {{{Name string} {City string}} Name}\
	    {{Name George City {San Jose}}}}
	relation union $r1 $r2
    } -result {type mismatch: heading, "Relation {{{Name string} {Age int} {City string}} Name}", does match, "Relation {{{Name string} {City string}} Name}"}\
    -returnCodes error

    test relation-union-8.0 {equal headings of different order} -body {
	set r1 {Relation {{{Name string} {Age int} {City string}} Name}\
	    {{Name Andrew Age 30 City Sunnyvale}}}
	set r2 {Relation {{{Age int} {Name string} {City string}} Name}\
	    {{Name George Age 20 City {San Jose}}}}
	relation union $r1 $r2
    } -result {Relation {{{Name string} {Age int} {City string}} Name}\
	{{Name Andrew Age 30 City Sunnyvale}\
	 {Name George Age 20 City {San Jose}}}}

    cleanupTests
}

namespace delete ::ral::test
