#!/usr/bin/env tclsh
# This software is copyrighted 2010 by G. Andrew Mangogna.
# The following terms apply to all files associated with the software unless
# explicitly disclaimed in individual files.
# 
# The authors hereby grant permission to use, copy, modify, distribute,
# and license this software and its documentation for any purpose, provided
# that existing copyright notices are retained in all copies and that this
# notice is included verbatim in any distributions. No written agreement,
# license, or royalty fee is required for any of the authorized uses.
# Modifications to this software may be copyrighted by their authors and
# need not follow the licensing terms described here, provided that the
# new terms are clearly indicated on the first page of each file where
# they apply.
# 
# IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY FOR
# DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING
# OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY DERIVATIVES
# THEREOF, EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT.  THIS SOFTWARE
# IS PROVIDED ON AN "AS IS" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE
# NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS,
# OR MODIFICATIONS.
# 
# GOVERNMENT USE: If you are acquiring this software on behalf of the
# U.S. government, the Government shall have only "Restricted Rights"
# in the software and related documentation as defined in the Federal
# Acquisition Regulations (FARs) in Clause 52.227.19 (c) (2).  If you
# are acquiring the software on behalf of the Department of Defense,
# the software shall be classified as "Commercial Computer Software"
# and the Government shall have only "Restricted Rights" as defined in
# Clause 252.227-7013 (c) (1) of DFARs.  Notwithstanding the foregoing,
# the authors grant the U.S. Government and others acting in its behalf
# permission to use and distribute the software in accordance with the
# terms specified in this license.
# 
#  *++
# MODULE:
#   sql.test -- test cases for serializing relvars into SQL
# 
# ABSTRACT:
# 
# $RCSfile: ralutil.test,v $
# $Revision: 1.2 $
# $Date: 2012/06/24 23:40:23 $
#  *--

package require tcltest
package require ral
package require ralutil

eval tcltest::configure $argv

namespace eval ::ralutil::test {
    namespace import ::tcltest::*
    namespace import ::ral::*
    namespace import ::ralutil::*

    proc relationMatch {expected actual} {
        return [::ral::relation is $expected == $actual]
    }
    customMatch relation [namespace current]::relationMatch

    test sysgen-1.0 {
        system generated identifiers
    } -setup {
        relvar create A {
            Attr1 int
            Attr2 string
        } Attr1
        sysIdsInit
        sysIdsGenSystemId A Attr1
    } -cleanup {
        relvar unset A
    } -body {
        relvar insert A {Attr2 foo}
    } -result {
        {Attr1 int Attr2 string} {
            {Attr1 1 Attr2 foo}
        }
    } -match relation

    test pipe-1.0 {
        simple pipeline, no place holders
    } -setup {
    } -cleanup {
    } -body {
        pipe {
            relation create {
                A string B int
            } {
                A foo B 20
            } {
                A bar B 30
            } |
            relation cardinality
        }
    } -result {2}

    test pipe-2.0 {
        simple pipeline with placeholder
    } -setup {
    } -cleanup {
    } -body {
        pipe {
            relation create {
                A string B int
            } {
                A foo B 20
            } {
                A bar B 30
            } |
            relation list ~ B
        }
    } -result {20 30}

    test pipe-3.0 {
        pipeline stored in variable
    } -setup {
    } -cleanup {
    } -body {
        pipe {
            relation create {
                A string B int
            } {
                A foo B 20
            } {
                A bar B 30
            } |
            relation list ~ A
        } cmd
        eval $cmd
    } -result {foo bar}

    test pipe-3.1 {
        pipeline stored in variable, timed execution
    } -setup {
    } -cleanup {
    } -body {
        set r [relation create {
            A string B int
        } {
            A foo B 20
        } {
            A bar B 30
        }]
        puts [time {
            pipe {
                set r %
                relation restrictwith ~ {$A eq "foo" || $A eq "baz"} %
                relation list ~ B
            } cmd %~
        } 10000]
        eval $cmd
    } -result {20}

    test pipe-4.0 {
        longer pipeline, different separator
    } -setup {
    } -cleanup {
    } -body {
        set r [relation create {
            A string B int
        } {
            A foo B 20
        } {
            A bar B 30
        }]
        pipe {
            set r %
            relation restrictwith ~ {$A eq "foo" || $A eq "baz"} %
            relation list ~ B
        } {} %~
    } -result {20}

    test pipe-4.0 {
        one command pipeline
    } -setup {
    } -cleanup {
    } -body {
        set r [relation create {
            A string B int
        } {
            A foo B 20
        } {
            A bar B 30
        }]
        pipe {
            relation cardinality $r
        }
    } -result {2}

    test attrConstraint-1.0 {
        Value contraint on an attribute
    } -setup {
        relvar create B {
            Name string
            Size double
        } Name
        ralutil attrConstraint B {:Size: > 0 && :Size: < 27}
    } -cleanup {
    } -body {
        relvar insert B {Name a Size 13}
        relation extract [relvar restrictone B Name a] Size
    } -result {13}

    test attrConstraint-2.0 {
        Value contraint on an attribute -- failed
    } -setup {
    } -cleanup {
        relvar unset B
    } -body {
        relvar insert B {Name a Size 43}
    } -result {constraint, "{ 43  > 0 &&  43  < 27}", on ::ralutil::test::B failed} -returnCodes error

if 0 {
    test -1.0 {
    } -setup {
    } -cleanup {
    } -body {
    } -result {}
}

    cleanupTests
}
