#!/usr/bin/env tclsh
# This software is copyrighted 2010 - 2014 by G. Andrew Mangogna.
# The following terms apply to all files associated with the software unless
# explicitly disclaimed in individual files.
# 
# The authors hereby grant permission to use, copy, modify, distribute,
# and license this software and its documentation for any purpose, provided
# that existing copyright notices are retained in all copies and that this
# notice is included verbatim in any distributions. No written agreement,
# license, or royalty fee is required for any of the authorized uses.
# Modifications to this software may be copyrighted by their authors and
# need not follow the licensing terms described here, provided that the
# new terms are clearly indicated on the first page of each file where
# they apply.
# 
# IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY FOR
# DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING
# OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY DERIVATIVES
# THEREOF, EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT.  THIS SOFTWARE
# IS PROVIDED ON AN "AS IS" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE
# NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS,
# OR MODIFICATIONS.
# 
# GOVERNMENT USE: If you are acquiring this software on behalf of the
# U.S. government, the Government shall have only "Restricted Rights"
# in the software and related documentation as defined in the Federal
# Acquisition Regulations (FARs) in Clause 52.227.19 (c) (2).  If you
# are acquiring the software on behalf of the Department of Defense,
# the software shall be classified as "Commercial Computer Software"
# and the Government shall have only "Restricted Rights" as defined in
# Clause 252.227-7013 (c) (1) of DFARs.  Notwithstanding the foregoing,
# the authors grant the U.S. Government and others acting in its behalf
# permission to use and distribute the software in accordance with the
# terms specified in this license.
# 
#  *++
# MODULE:
#   sql.test -- test cases for serializing relvars into SQL
# 
# ABSTRACT:
# 
# $RCSfile$
# $Revision$
# $Date$
#  *--

package require tcltest
package require ral
package require fileutil
package require sqlite3

eval tcltest::configure $argv

namespace eval ::ral::sql::test {
    namespace import ::tcltest::*
    namespace import ::ral::*

    # example relvar data to use
    source [file join [file dirname [info script]] testdata.tcl]
 
    test sql-1.0 {
	SQL to create schema
    } -setup {
    } -cleanup {
    } -body {
	set s [::ral::sqlSchema]
        fileutil::writeFile test.sql $s
    } -result {}
 
    test ral-metadata-1.0 {
	SQL schema for ral meta-data
    } -setup {
        file delete meta.sqlite3
        sqlite3 ::db meta.sqlite3
    } -cleanup {
        # file delete meta.sqlite3
    } -body {
        db eval {pragma foreign_keys=ON}
        db eval $::ral::ralSQLSchema
    } -result {}
 
    test storeToSQLite-1.0 {
	store schema to SQLite
    } -setup {
    } -cleanup {
        # file delete test.sqlite3
    } -body {
        storeToSQLite test.sqlite3
    } -result {}
 
    test loadFromSQLite-1.0 {
	load schema from SQLite
    } -setup {
        namespace eval testns {}
    } -cleanup {
    } -body {
        loadFromSQLite test.sqlite3 [namespace current]::testns
        relvar constraint info [namespace current]::testns::valstatus
    } -result {procedural ::ral::sql::test::testns::valstatus ::ral::sql::test::testns::S {namespace eval ::ral::sql::test::testns {namespace eval ::ral::sql::test {
    variable S
    set city [::ral::relation project [::ral::relation restrictwith $S {$STATUS == 1}] CITY]
    return [expr {[::ral::relation cardinality $city] < 2}]
}}}}
 
    test storeToSQLite-2.0 {
	store schema to SQLite
    } -setup {
        namespace eval pyccatest {}
        deserializeFromFile pycca_test.ral pyccatest
    } -cleanup {
        relvar constraint delete {*}[relvar constraint names *pyccatest*]
        relvar unset {*}[relvar names *pyccatest*]
        namespace delete pyccatest
    } -body {
        storeToSQLite pycca_test.sqlite3 *pyccatest*
    } -result {}
 
    test loadFromSQLite-2.0 {
	load schema from SQLite
    } -setup {
        namespace eval pyccatest {}
    } -cleanup {
        relvar constraint delete {*}[relvar constraint names *pyccatest*]
        relvar unset {*}[relvar names *pyccatest*]
        namespace delete pyccatest
    } -body {
        loadFromSQLite pycca_test.sqlite3 [namespace current]::pyccatest
    } -result {}

if 0 {
    test -1.0 {
    } -setup {
    } -cleanup {
    } -body {
    } -result {}
}

    cleanupTests
}

namespace delete ::ral::sql::test
