#!/bin/sh
# \
exec tclsh "$0" "$@"
# This software is copyrighted 2006 - 2014 by G. Andrew Mangogna.
# The following terms apply to all files associated with the software unless
# explicitly disclaimed in individual files.
# 
# The authors hereby grant permission to use, copy, modify, distribute,
# and license this software and its documentation for any purpose, provided
# that existing copyright notices are retained in all copies and that this
# notice is included verbatim in any distributions. No written agreement,
# license, or royalty fee is required for any of the authorized uses.
# Modifications to this software may be copyrighted by their authors and
# need not follow the licensing terms described here, provided that the
# new terms are clearly indicated on the first page of each file where
# they apply.
# 
# IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY FOR
# DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING
# OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY DERIVATIVES
# THEREOF, EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT.  THIS SOFTWARE
# IS PROVIDED ON AN "AS IS" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE
# NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS,
# OR MODIFICATIONS.
# 
# GOVERNMENT USE: If you are acquiring this software on behalf of the
# U.S. government, the Government shall have only "Restricted Rights"
# in the software and related documentation as defined in the Federal
# Acquisition Regulations (FARs) in Clause 52.227.19 (c) (2).  If you
# are acquiring the software on behalf of the Department of Defense,
# the software shall be classified as "Commercial Computer Software"
# and the Government shall have only "Restricted Rights" as defined in
# Clause 252.227-7013 (c) (1) of DFARs.  Notwithstanding the foregoing,
# the authors grant the U.S. Government and others acting in its behalf
# permission to use and distribute the software in accordance with the
# terms specified in this license.
# 
#  *++
# MODULE:
#   serialize.test -- test cases for serializing relvars in the
#	Tcl Relational Algebra Library
# 
# ABSTRACT:
# 
#  *--

package require tcltest 2.2
package require ral

eval tcltest::configure $argv

namespace eval ::ral::test {
    namespace import ::tcltest::*
    namespace import ::ral::*

    proc tupleMatch {expected actual} {
	return [::ral::tuple equal $expected $actual]
    }
    customMatch tuple [namespace current]::tupleMatch

    proc relationMatch {expected actual} {
	return [::ral::relation is $expected == $actual]
    }
    customMatch relation [namespace current]::relationMatch

    proc cmpRelvars {ns1 ns2} {
	set names1 [lsort [relvar names ${ns1}*]]
	set names2 [lsort [relvar names ${ns2}*]]
	if {[llength $names1] != [llength $names2]} {
	    puts "$ns1 names: $names1"
	    puts "$ns2 names: $names2"
	    return 0
	}
	foreach r1 $names1 r2 $names2 {
	    set val1 [relvar set $r1]
	    set val2 [relvar set $r2]
	    if {[relation is $val1 != $val2]} {
		puts [relformat $val1 $r1]
		puts [relformat $val2 $r2]
		return 0
	    }
	}
	return 1
    }

    # example relvar data to use
    source [file join [file dirname [info script]] testdata.tcl]
 
    test serialize-1.0 {
	serialize relvar data
    } -setup {
    } -cleanup {
    } -body {
	set s [serialize]
	llength $s
    } -result {8}
 
    test deserialize-1.0 {
	deserialize relvar data
    } -setup {
	set dstNs ::ral::deserial
    } -cleanup {
	relvar constraint delete {*}[relvar constraint names ${dstNs}::*]
	relvar unset {*}[relvar names ${dstNs}::*]
	namespace delete $dstNs
    } -body {
	deserialize $s $dstNs
	cmpRelvars [namespace current] $dstNs
    } -result {1}

    test deserialize-0.8.X-1.0 {
        deserialize from old format data
    } -setup {
	set dstNs ::ral::deserial
    } -cleanup {
	eval relvar constraint delete\
	    [relvar constraint names ${dstNs}::*]
	eval relvar unset [relvar names ${dstNs}::*]
	namespace delete $dstNs
    } -body {
	deserializeFromFile-0.8.X serialized0.8.9.ral $dstNs
        #puts [relvar names]
        #puts [relvar constraint names]
	cmpRelvars [namespace current] $dstNs
    } -result {1}

    test deserialize-0.8.X-2.0 {
        deserialize from old format data using 0.9 command
    } -setup {
	set dstNs ::ral::deserial
    } -cleanup {
	eval relvar constraint delete\
	    [relvar constraint names ${dstNs}::*]
	eval relvar unset [relvar names ${dstNs}::*]
	namespace delete $dstNs
    } -body {
	deserializeFromFile serialized0.8.9.ral $dstNs
	cmpRelvars [namespace current] $dstNs
    } -result {1}

    test storeToMk-1.0 {
	metakit persistence for relvars
    } -setup {
	set dstNs ::ral::deserial
	set mkFile [file join [temporaryDirectory] storeToMk-1.0.mk]
    } -cleanup {
	eval relvar constraint delete\
	    [relvar constraint names ${dstNs}::*]
	eval relvar unset [relvar names ${dstNs}::*]
	namespace delete $dstNs
	file delete $mkFile
    } -body {
	storeToMk $mkFile
	loadFromMk $mkFile $dstNs
	cmpRelvars [namespace current] $dstNs
    } -result {1}

    test loadFromMk-1.0 {
        load metakit serialization in old format
    } -setup {
        set nsnew [namespace current]::new
        set nsold [namespace current]::old
        deserializeFromFile merge1.ral $nsnew
    } -cleanup {
	eval relvar constraint delete\
	    [relvar constraint names ${nsnew}::*]
	eval relvar unset [relvar names ${nsnew}::*]
	namespace delete $nsnew
	eval relvar constraint delete\
	    [relvar constraint names ${nsold}::*]
	eval relvar unset [relvar names ${nsold}::*]
	namespace delete $nsold
    } -body {
        loadFromMk merge1-old.mk $nsold
	cmpRelvars $nsnew $nsold
    } -result {1}

    test dump-1.0 {
	serialize relvars as a Tcl script
    } -setup {
	set dstNs ::ral::deserial
    } -cleanup {
	eval relvar constraint delete\
	    [relvar constraint names ${dstNs}::*]
	eval relvar unset [relvar names ${dstNs}::*]
	namespace delete $dstNs
    } -body {
	set d [dump]
	namespace eval $dstNs $d
	cmpRelvars [namespace current] $dstNs
    } -result {1}

    test merge-1.0 {
        merge data from separate files
    } -setup {
	set dstNs ::ral::deserial
        deserializeFromFile merge1.ral $dstNs
    } -cleanup {
	eval relvar constraint delete\
	    [relvar constraint names ${dstNs}::*]
	eval relvar unset [relvar names ${dstNs}::*]
	namespace delete $dstNs
    } -body {
        mergeFromFile merge2.ral $dstNs
        relation cardinality [relvar set ${dstNs}::Domain]
    } -result {2}

    test mergeFromMk-1.0 {
        merge data from metakit files
    } -setup {
	set dstNs ::ral::deserial
        loadFromMk merge1.mk $dstNs
    } -cleanup {
	eval relvar constraint delete\
	    [relvar constraint names ${dstNs}::*]
	eval relvar unset [relvar names ${dstNs}::*]
	namespace delete $dstNs
    } -body {
        mergeFromMk merge2.mk $dstNs
        relation cardinality [relvar set ${dstNs}::Domain]
    } -result {2}

if 0 {
    test -1.0 {
    } -setup {
    } -cleanup {
    } -body {
    } -result {}
}

    cleanupTests
}

namespace delete ::ral::test
